// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
class DigitizerSetupMessage;
class DigitizerSetupMessageDefaultTypeInternal;
extern DigitizerSetupMessageDefaultTypeInternal _DigitizerSetupMessage_default_instance_;
class Message;
class MessageDefaultTypeInternal;
extern MessageDefaultTypeInternal _Message_default_instance_;
class SetupMessage;
class SetupMessageDefaultTypeInternal;
extern SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
class TofWidthMessage;
class TofWidthMessageDefaultTypeInternal;
extern TofWidthMessageDefaultTypeInternal _TofWidthMessage_default_instance_;
class TrigClassMessage;
class TrigClassMessageDefaultTypeInternal;
extern TrigClassMessageDefaultTypeInternal _TrigClassMessage_default_instance_;
class TrigSourceMessage;
class TrigSourceMessageDefaultTypeInternal;
extern TrigSourceMessageDefaultTypeInternal _TrigSourceMessage_default_instance_;
class UimfRequestMessage;
class UimfRequestMessageDefaultTypeInternal;
extern UimfRequestMessageDefaultTypeInternal _UimfRequestMessage_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DigitizerSetupMessage* Arena::CreateMaybeMessage<::DigitizerSetupMessage>(Arena*);
template<> ::Message* Arena::CreateMaybeMessage<::Message>(Arena*);
template<> ::SetupMessage* Arena::CreateMaybeMessage<::SetupMessage>(Arena*);
template<> ::TofWidthMessage* Arena::CreateMaybeMessage<::TofWidthMessage>(Arena*);
template<> ::TrigClassMessage* Arena::CreateMaybeMessage<::TrigClassMessage>(Arena*);
template<> ::TrigSourceMessage* Arena::CreateMaybeMessage<::TrigSourceMessage>(Arena*);
template<> ::UimfRequestMessage* Arena::CreateMaybeMessage<::UimfRequestMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TrigClassMessage_TrigClass : int {
  TrigClassMessage_TrigClass_Edge = 0,
  TrigClassMessage_TrigClass_Tv = 1,
  TrigClassMessage_TrigClass_Or = 3,
  TrigClassMessage_TrigClass_Nor = 4,
  TrigClassMessage_TrigClass_And = 5,
  TrigClassMessage_TrigClass_Nand = 6,
  TrigClassMessage_TrigClass_TrigClassMessage_TrigClass_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrigClassMessage_TrigClass_TrigClassMessage_TrigClass_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrigClassMessage_TrigClass_IsValid(int value);
constexpr TrigClassMessage_TrigClass TrigClassMessage_TrigClass_TrigClass_MIN = TrigClassMessage_TrigClass_Edge;
constexpr TrigClassMessage_TrigClass TrigClassMessage_TrigClass_TrigClass_MAX = TrigClassMessage_TrigClass_Nand;
constexpr int TrigClassMessage_TrigClass_TrigClass_ARRAYSIZE = TrigClassMessage_TrigClass_TrigClass_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigClassMessage_TrigClass_descriptor();
template<typename T>
inline const std::string& TrigClassMessage_TrigClass_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrigClassMessage_TrigClass>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrigClassMessage_TrigClass_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrigClassMessage_TrigClass_descriptor(), enum_t_value);
}
inline bool TrigClassMessage_TrigClass_Parse(
    const std::string& name, TrigClassMessage_TrigClass* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrigClassMessage_TrigClass>(
    TrigClassMessage_TrigClass_descriptor(), name, value);
}
enum TrigSourceMessage_TrigCoupling : int {
  TrigSourceMessage_TrigCoupling_Dc = 0,
  TrigSourceMessage_TrigCoupling_Ac = 1,
  TrigSourceMessage_TrigCoupling_HfReject = 2,
  TrigSourceMessage_TrigCoupling_Dc50Ohms = 3,
  TrigSourceMessage_TrigCoupling_Ac50Ohms = 4,
  TrigSourceMessage_TrigCoupling_TrigSourceMessage_TrigCoupling_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrigSourceMessage_TrigCoupling_TrigSourceMessage_TrigCoupling_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrigSourceMessage_TrigCoupling_IsValid(int value);
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage_TrigCoupling_TrigCoupling_MIN = TrigSourceMessage_TrigCoupling_Dc;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage_TrigCoupling_TrigCoupling_MAX = TrigSourceMessage_TrigCoupling_Ac50Ohms;
constexpr int TrigSourceMessage_TrigCoupling_TrigCoupling_ARRAYSIZE = TrigSourceMessage_TrigCoupling_TrigCoupling_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigSourceMessage_TrigCoupling_descriptor();
template<typename T>
inline const std::string& TrigSourceMessage_TrigCoupling_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrigSourceMessage_TrigCoupling>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrigSourceMessage_TrigCoupling_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrigSourceMessage_TrigCoupling_descriptor(), enum_t_value);
}
inline bool TrigSourceMessage_TrigCoupling_Parse(
    const std::string& name, TrigSourceMessage_TrigCoupling* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrigSourceMessage_TrigCoupling>(
    TrigSourceMessage_TrigCoupling_descriptor(), name, value);
}
enum TrigSourceMessage_TrigSlope : int {
  TrigSourceMessage_TrigSlope_Positive = 0,
  TrigSourceMessage_TrigSlope_Negative = 1,
  TrigSourceMessage_TrigSlope_TrigSourceMessage_TrigSlope_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrigSourceMessage_TrigSlope_TrigSourceMessage_TrigSlope_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrigSourceMessage_TrigSlope_IsValid(int value);
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage_TrigSlope_TrigSlope_MIN = TrigSourceMessage_TrigSlope_Positive;
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage_TrigSlope_TrigSlope_MAX = TrigSourceMessage_TrigSlope_Negative;
constexpr int TrigSourceMessage_TrigSlope_TrigSlope_ARRAYSIZE = TrigSourceMessage_TrigSlope_TrigSlope_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigSourceMessage_TrigSlope_descriptor();
template<typename T>
inline const std::string& TrigSourceMessage_TrigSlope_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrigSourceMessage_TrigSlope>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrigSourceMessage_TrigSlope_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrigSourceMessage_TrigSlope_descriptor(), enum_t_value);
}
inline bool TrigSourceMessage_TrigSlope_Parse(
    const std::string& name, TrigSourceMessage_TrigSlope* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrigSourceMessage_TrigSlope>(
    TrigSourceMessage_TrigSlope_descriptor(), name, value);
}
enum UimfRequestMessage_FrameType : int {
  UimfRequestMessage_FrameType_MS = 0,
  UimfRequestMessage_FrameType_MSMS = 1,
  UimfRequestMessage_FrameType_Calibration = 2,
  UimfRequestMessage_FrameType_Prescan = 3,
  UimfRequestMessage_FrameType_UimfRequestMessage_FrameType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UimfRequestMessage_FrameType_UimfRequestMessage_FrameType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UimfRequestMessage_FrameType_IsValid(int value);
constexpr UimfRequestMessage_FrameType UimfRequestMessage_FrameType_FrameType_MIN = UimfRequestMessage_FrameType_MS;
constexpr UimfRequestMessage_FrameType UimfRequestMessage_FrameType_FrameType_MAX = UimfRequestMessage_FrameType_Prescan;
constexpr int UimfRequestMessage_FrameType_FrameType_ARRAYSIZE = UimfRequestMessage_FrameType_FrameType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UimfRequestMessage_FrameType_descriptor();
template<typename T>
inline const std::string& UimfRequestMessage_FrameType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UimfRequestMessage_FrameType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UimfRequestMessage_FrameType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UimfRequestMessage_FrameType_descriptor(), enum_t_value);
}
inline bool UimfRequestMessage_FrameType_Parse(
    const std::string& name, UimfRequestMessage_FrameType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UimfRequestMessage_FrameType>(
    UimfRequestMessage_FrameType_descriptor(), name, value);
}
// ===================================================================

class Message :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Message) */ {
 public:
  Message();
  virtual ~Message();

  Message(const Message& from);
  Message(Message&& from) noexcept
    : Message() {
    *this = ::std::move(from);
  }

  inline Message& operator=(const Message& from) {
    CopyFrom(from);
    return *this;
  }
  inline Message& operator=(Message&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Message& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Message* internal_default_instance() {
    return reinterpret_cast<const Message*>(
               &_Message_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Message& a, Message& b) {
    a.Swap(&b);
  }
  inline void Swap(Message* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Message* New() const final {
    return CreateMaybeMessage<Message>(nullptr);
  }

  Message* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Message>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Message& from);
  void MergeFrom(const Message& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Message* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Message";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMzFieldNumber = 1,
    kTicFieldNumber = 2,
    kTimeStampsFieldNumber = 3,
  };
  // repeated int32 mz = 1;
  int mz_size() const;
  void clear_mz();
  ::PROTOBUF_NAMESPACE_ID::int32 mz(int index) const;
  void set_mz(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_mz(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      mz() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_mz();

  // repeated uint32 tic = 2;
  int tic_size() const;
  void clear_tic();
  ::PROTOBUF_NAMESPACE_ID::uint32 tic(int index) const;
  void set_tic(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_tic(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      tic() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_tic();

  // repeated uint64 time_stamps = 3;
  int time_stamps_size() const;
  void clear_time_stamps();
  ::PROTOBUF_NAMESPACE_ID::uint64 time_stamps(int index) const;
  void set_time_stamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_time_stamps(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      time_stamps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_time_stamps();

  // @@protoc_insertion_point(class_scope:Message)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > mz_;
  mutable std::atomic<int> _mz_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > tic_;
  mutable std::atomic<int> _tic_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > time_stamps_;
  mutable std::atomic<int> _time_stamps_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TofWidthMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TofWidthMessage) */ {
 public:
  TofWidthMessage();
  virtual ~TofWidthMessage();

  TofWidthMessage(const TofWidthMessage& from);
  TofWidthMessage(TofWidthMessage&& from) noexcept
    : TofWidthMessage() {
    *this = ::std::move(from);
  }

  inline TofWidthMessage& operator=(const TofWidthMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TofWidthMessage& operator=(TofWidthMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TofWidthMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TofWidthMessage* internal_default_instance() {
    return reinterpret_cast<const TofWidthMessage*>(
               &_TofWidthMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TofWidthMessage& a, TofWidthMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TofWidthMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TofWidthMessage* New() const final {
    return CreateMaybeMessage<TofWidthMessage>(nullptr);
  }

  TofWidthMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TofWidthMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TofWidthMessage& from);
  void MergeFrom(const TofWidthMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TofWidthMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TofWidthMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPusherPulseWidthFieldNumber = 1,
    kNumSamplesFieldNumber = 2,
  };
  // uint64 pusher_pulse_width = 1;
  void clear_pusher_pulse_width();
  ::PROTOBUF_NAMESPACE_ID::uint64 pusher_pulse_width() const;
  void set_pusher_pulse_width(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 num_samples = 2;
  void clear_num_samples();
  ::PROTOBUF_NAMESPACE_ID::uint64 num_samples() const;
  void set_num_samples(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // @@protoc_insertion_point(class_scope:TofWidthMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 pusher_pulse_width_;
  ::PROTOBUF_NAMESPACE_ID::uint64 num_samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class SetupMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SetupMessage) */ {
 public:
  SetupMessage();
  virtual ~SetupMessage();

  SetupMessage(const SetupMessage& from);
  SetupMessage(SetupMessage&& from) noexcept
    : SetupMessage() {
    *this = ::std::move(from);
  }

  inline SetupMessage& operator=(const SetupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetupMessage& operator=(SetupMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetupMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetupMessage* internal_default_instance() {
    return reinterpret_cast<const SetupMessage*>(
               &_SetupMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetupMessage& a, SetupMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SetupMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetupMessage* New() const final {
    return CreateMaybeMessage<SetupMessage>(nullptr);
  }

  SetupMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetupMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetupMessage& from);
  void MergeFrom(const SetupMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetupMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SetupMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrigFieldNumber = 3,
    kSourceFieldNumber = 4,
    kHorizontalFieldNumber = 1,
    kVerticalFieldNumber = 2,
  };
  // .TrigClassMessage Trig = 3;
  bool has_trig() const;
  void clear_trig();
  const ::TrigClassMessage& trig() const;
  ::TrigClassMessage* release_trig();
  ::TrigClassMessage* mutable_trig();
  void set_allocated_trig(::TrigClassMessage* trig);

  // .TrigSourceMessage Source = 4;
  bool has_source() const;
  void clear_source();
  const ::TrigSourceMessage& source() const;
  ::TrigSourceMessage* release_source();
  ::TrigSourceMessage* mutable_source();
  void set_allocated_source(::TrigSourceMessage* source);

  // double horizontal = 1;
  void clear_horizontal();
  double horizontal() const;
  void set_horizontal(double value);

  // double vertical = 2;
  void clear_vertical();
  double vertical() const;
  void set_vertical(double value);

  // @@protoc_insertion_point(class_scope:SetupMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::TrigClassMessage* trig_;
  ::TrigSourceMessage* source_;
  double horizontal_;
  double vertical_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TrigClassMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrigClassMessage) */ {
 public:
  TrigClassMessage();
  virtual ~TrigClassMessage();

  TrigClassMessage(const TrigClassMessage& from);
  TrigClassMessage(TrigClassMessage&& from) noexcept
    : TrigClassMessage() {
    *this = ::std::move(from);
  }

  inline TrigClassMessage& operator=(const TrigClassMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrigClassMessage& operator=(TrigClassMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrigClassMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrigClassMessage* internal_default_instance() {
    return reinterpret_cast<const TrigClassMessage*>(
               &_TrigClassMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TrigClassMessage& a, TrigClassMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TrigClassMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrigClassMessage* New() const final {
    return CreateMaybeMessage<TrigClassMessage>(nullptr);
  }

  TrigClassMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrigClassMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrigClassMessage& from);
  void MergeFrom(const TrigClassMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrigClassMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrigClassMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrigClassMessage_TrigClass TrigClass;
  static constexpr TrigClass Edge =
    TrigClassMessage_TrigClass_Edge;
  static constexpr TrigClass Tv =
    TrigClassMessage_TrigClass_Tv;
  static constexpr TrigClass Or =
    TrigClassMessage_TrigClass_Or;
  static constexpr TrigClass Nor =
    TrigClassMessage_TrigClass_Nor;
  static constexpr TrigClass And =
    TrigClassMessage_TrigClass_And;
  static constexpr TrigClass Nand =
    TrigClassMessage_TrigClass_Nand;
  static inline bool TrigClass_IsValid(int value) {
    return TrigClassMessage_TrigClass_IsValid(value);
  }
  static constexpr TrigClass TrigClass_MIN =
    TrigClassMessage_TrigClass_TrigClass_MIN;
  static constexpr TrigClass TrigClass_MAX =
    TrigClassMessage_TrigClass_TrigClass_MAX;
  static constexpr int TrigClass_ARRAYSIZE =
    TrigClassMessage_TrigClass_TrigClass_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrigClass_descriptor() {
    return TrigClassMessage_TrigClass_descriptor();
  }
  template<typename T>
  static inline const std::string& TrigClass_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrigClass>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrigClass_Name.");
    return TrigClassMessage_TrigClass_Name(enum_t_value);
  }
  static inline bool TrigClass_Parse(const std::string& name,
      TrigClass* value) {
    return TrigClassMessage_TrigClass_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTrigClassFieldNumber = 1,
    kSourcePatternFieldNumber = 2,
  };
  // .TrigClassMessage.TrigClass trig_class = 1;
  void clear_trig_class();
  ::TrigClassMessage_TrigClass trig_class() const;
  void set_trig_class(::TrigClassMessage_TrigClass value);

  // int32 source_pattern = 2;
  void clear_source_pattern();
  ::PROTOBUF_NAMESPACE_ID::int32 source_pattern() const;
  void set_source_pattern(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:TrigClassMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int trig_class_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_pattern_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class TrigSourceMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TrigSourceMessage) */ {
 public:
  TrigSourceMessage();
  virtual ~TrigSourceMessage();

  TrigSourceMessage(const TrigSourceMessage& from);
  TrigSourceMessage(TrigSourceMessage&& from) noexcept
    : TrigSourceMessage() {
    *this = ::std::move(from);
  }

  inline TrigSourceMessage& operator=(const TrigSourceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrigSourceMessage& operator=(TrigSourceMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrigSourceMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrigSourceMessage* internal_default_instance() {
    return reinterpret_cast<const TrigSourceMessage*>(
               &_TrigSourceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TrigSourceMessage& a, TrigSourceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(TrigSourceMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrigSourceMessage* New() const final {
    return CreateMaybeMessage<TrigSourceMessage>(nullptr);
  }

  TrigSourceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrigSourceMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrigSourceMessage& from);
  void MergeFrom(const TrigSourceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrigSourceMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TrigSourceMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TrigSourceMessage_TrigCoupling TrigCoupling;
  static constexpr TrigCoupling Dc =
    TrigSourceMessage_TrigCoupling_Dc;
  static constexpr TrigCoupling Ac =
    TrigSourceMessage_TrigCoupling_Ac;
  static constexpr TrigCoupling HfReject =
    TrigSourceMessage_TrigCoupling_HfReject;
  static constexpr TrigCoupling Dc50Ohms =
    TrigSourceMessage_TrigCoupling_Dc50Ohms;
  static constexpr TrigCoupling Ac50Ohms =
    TrigSourceMessage_TrigCoupling_Ac50Ohms;
  static inline bool TrigCoupling_IsValid(int value) {
    return TrigSourceMessage_TrigCoupling_IsValid(value);
  }
  static constexpr TrigCoupling TrigCoupling_MIN =
    TrigSourceMessage_TrigCoupling_TrigCoupling_MIN;
  static constexpr TrigCoupling TrigCoupling_MAX =
    TrigSourceMessage_TrigCoupling_TrigCoupling_MAX;
  static constexpr int TrigCoupling_ARRAYSIZE =
    TrigSourceMessage_TrigCoupling_TrigCoupling_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrigCoupling_descriptor() {
    return TrigSourceMessage_TrigCoupling_descriptor();
  }
  template<typename T>
  static inline const std::string& TrigCoupling_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrigCoupling>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrigCoupling_Name.");
    return TrigSourceMessage_TrigCoupling_Name(enum_t_value);
  }
  static inline bool TrigCoupling_Parse(const std::string& name,
      TrigCoupling* value) {
    return TrigSourceMessage_TrigCoupling_Parse(name, value);
  }

  typedef TrigSourceMessage_TrigSlope TrigSlope;
  static constexpr TrigSlope Positive =
    TrigSourceMessage_TrigSlope_Positive;
  static constexpr TrigSlope Negative =
    TrigSourceMessage_TrigSlope_Negative;
  static inline bool TrigSlope_IsValid(int value) {
    return TrigSourceMessage_TrigSlope_IsValid(value);
  }
  static constexpr TrigSlope TrigSlope_MIN =
    TrigSourceMessage_TrigSlope_TrigSlope_MIN;
  static constexpr TrigSlope TrigSlope_MAX =
    TrigSourceMessage_TrigSlope_TrigSlope_MAX;
  static constexpr int TrigSlope_ARRAYSIZE =
    TrigSourceMessage_TrigSlope_TrigSlope_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrigSlope_descriptor() {
    return TrigSourceMessage_TrigSlope_descriptor();
  }
  template<typename T>
  static inline const std::string& TrigSlope_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrigSlope>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrigSlope_Name.");
    return TrigSourceMessage_TrigSlope_Name(enum_t_value);
  }
  static inline bool TrigSlope_Parse(const std::string& name,
      TrigSlope* value) {
    return TrigSourceMessage_TrigSlope_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kChannelFieldNumber = 1,
    kTrigCouplingFieldNumber = 2,
    kTrigLevel1FieldNumber = 3,
    kTrigLevel2FieldNumber = 4,
  };
  // int32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
  void clear_trig_coupling();
  ::TrigSourceMessage_TrigCoupling trig_coupling() const;
  void set_trig_coupling(::TrigSourceMessage_TrigCoupling value);

  // double trig_level_1 = 3;
  void clear_trig_level_1();
  double trig_level_1() const;
  void set_trig_level_1(double value);

  // double trig_level_2 = 4;
  void clear_trig_level_2();
  double trig_level_2() const;
  void set_trig_level_2(double value);

  // @@protoc_insertion_point(class_scope:TrigSourceMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  int trig_coupling_;
  double trig_level_1_;
  double trig_level_2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class UimfRequestMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UimfRequestMessage) */ {
 public:
  UimfRequestMessage();
  virtual ~UimfRequestMessage();

  UimfRequestMessage(const UimfRequestMessage& from);
  UimfRequestMessage(UimfRequestMessage&& from) noexcept
    : UimfRequestMessage() {
    *this = ::std::move(from);
  }

  inline UimfRequestMessage& operator=(const UimfRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline UimfRequestMessage& operator=(UimfRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UimfRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UimfRequestMessage* internal_default_instance() {
    return reinterpret_cast<const UimfRequestMessage*>(
               &_UimfRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UimfRequestMessage& a, UimfRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(UimfRequestMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UimfRequestMessage* New() const final {
    return CreateMaybeMessage<UimfRequestMessage>(nullptr);
  }

  UimfRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UimfRequestMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UimfRequestMessage& from);
  void MergeFrom(const UimfRequestMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UimfRequestMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UimfRequestMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef UimfRequestMessage_FrameType FrameType;
  static constexpr FrameType MS =
    UimfRequestMessage_FrameType_MS;
  static constexpr FrameType MSMS =
    UimfRequestMessage_FrameType_MSMS;
  static constexpr FrameType Calibration =
    UimfRequestMessage_FrameType_Calibration;
  static constexpr FrameType Prescan =
    UimfRequestMessage_FrameType_Prescan;
  static inline bool FrameType_IsValid(int value) {
    return UimfRequestMessage_FrameType_IsValid(value);
  }
  static constexpr FrameType FrameType_MIN =
    UimfRequestMessage_FrameType_FrameType_MIN;
  static constexpr FrameType FrameType_MAX =
    UimfRequestMessage_FrameType_FrameType_MAX;
  static constexpr int FrameType_ARRAYSIZE =
    UimfRequestMessage_FrameType_FrameType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  FrameType_descriptor() {
    return UimfRequestMessage_FrameType_descriptor();
  }
  template<typename T>
  static inline const std::string& FrameType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, FrameType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function FrameType_Name.");
    return UimfRequestMessage_FrameType_Name(enum_t_value);
  }
  static inline bool FrameType_Parse(const std::string& name,
      FrameType* value) {
    return UimfRequestMessage_FrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 7,
    kStartTriggerFieldNumber = 1,
    kNbrSamplesFieldNumber = 2,
    kFrameLengthFieldNumber = 3,
    kNbrAccumulationsFieldNumber = 4,
    kFrameNumberFieldNumber = 5,
    kOffsetBinsFieldNumber = 6,
    kFrameTypeFieldNumber = 8,
  };
  // string file_name = 7;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);

  // uint64 start_trigger = 1;
  void clear_start_trigger();
  ::PROTOBUF_NAMESPACE_ID::uint64 start_trigger() const;
  void set_start_trigger(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 nbr_samples = 2;
  void clear_nbr_samples();
  ::PROTOBUF_NAMESPACE_ID::uint64 nbr_samples() const;
  void set_nbr_samples(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 frame_length = 3;
  void clear_frame_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_length() const;
  void set_frame_length(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint64 nbr_accumulations = 4;
  void clear_nbr_accumulations();
  ::PROTOBUF_NAMESPACE_ID::uint64 nbr_accumulations() const;
  void set_nbr_accumulations(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // uint32 frame_number = 5;
  void clear_frame_number();
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number() const;
  void set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 offset_bins = 6;
  void clear_offset_bins();
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_bins() const;
  void set_offset_bins(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // .UimfRequestMessage.FrameType frame_type = 8;
  void clear_frame_type();
  ::UimfRequestMessage_FrameType frame_type() const;
  void set_frame_type(::UimfRequestMessage_FrameType value);

  // @@protoc_insertion_point(class_scope:UimfRequestMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::uint64 start_trigger_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nbr_samples_;
  ::PROTOBUF_NAMESPACE_ID::uint64 frame_length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 nbr_accumulations_;
  ::PROTOBUF_NAMESPACE_ID::uint32 frame_number_;
  ::PROTOBUF_NAMESPACE_ID::uint32 offset_bins_;
  int frame_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class DigitizerSetupMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DigitizerSetupMessage) */ {
 public:
  DigitizerSetupMessage();
  virtual ~DigitizerSetupMessage();

  DigitizerSetupMessage(const DigitizerSetupMessage& from);
  DigitizerSetupMessage(DigitizerSetupMessage&& from) noexcept
    : DigitizerSetupMessage() {
    *this = ::std::move(from);
  }

  inline DigitizerSetupMessage& operator=(const DigitizerSetupMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitizerSetupMessage& operator=(DigitizerSetupMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DigitizerSetupMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DigitizerSetupMessage* internal_default_instance() {
    return reinterpret_cast<const DigitizerSetupMessage*>(
               &_DigitizerSetupMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DigitizerSetupMessage& a, DigitizerSetupMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitizerSetupMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DigitizerSetupMessage* New() const final {
    return CreateMaybeMessage<DigitizerSetupMessage>(nullptr);
  }

  DigitizerSetupMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DigitizerSetupMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DigitizerSetupMessage& from);
  void MergeFrom(const DigitizerSetupMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitizerSetupMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DigitizerSetupMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_message_2eproto);
    return ::descriptor_table_message_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHorizontalFieldNumber = 1,
    kVerticalFieldNumber = 2,
    kTrigClassFieldNumber = 3,
    kTrigSourceFieldNumber = 4,
    kModeFieldNumber = 5,
    kSamplesFieldNumber = 6,
    kSegmentsFieldNumber = 7,
    kPostSamplesFieldNumber = 8,
    kPreSamplesFieldNumber = 9,
  };
  // double horizontal = 1;
  void clear_horizontal();
  double horizontal() const;
  void set_horizontal(double value);

  // double vertical = 2;
  void clear_vertical();
  double vertical() const;
  void set_vertical(double value);

  // double trig_class = 3;
  void clear_trig_class();
  double trig_class() const;
  void set_trig_class(double value);

  // double trig_source = 4;
  void clear_trig_source();
  double trig_source() const;
  void set_trig_source(double value);

  // int32 mode = 5;
  void clear_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 mode() const;
  void set_mode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // uint32 samples = 6;
  void clear_samples();
  ::PROTOBUF_NAMESPACE_ID::uint32 samples() const;
  void set_samples(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 segments = 7;
  void clear_segments();
  ::PROTOBUF_NAMESPACE_ID::uint32 segments() const;
  void set_segments(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 post_samples = 8;
  void clear_post_samples();
  ::PROTOBUF_NAMESPACE_ID::uint32 post_samples() const;
  void set_post_samples(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 pre_samples = 9;
  void clear_pre_samples();
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_samples() const;
  void set_pre_samples(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:DigitizerSetupMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  double horizontal_;
  double vertical_;
  double trig_class_;
  double trig_source_;
  ::PROTOBUF_NAMESPACE_ID::int32 mode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 samples_;
  ::PROTOBUF_NAMESPACE_ID::uint32 segments_;
  ::PROTOBUF_NAMESPACE_ID::uint32 post_samples_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pre_samples_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Message

// repeated int32 mz = 1;
inline int Message::mz_size() const {
  return mz_.size();
}
inline void Message::clear_mz() {
  mz_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Message::mz(int index) const {
  // @@protoc_insertion_point(field_get:Message.mz)
  return mz_.Get(index);
}
inline void Message::set_mz(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  mz_.Set(index, value);
  // @@protoc_insertion_point(field_set:Message.mz)
}
inline void Message::add_mz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  mz_.Add(value);
  // @@protoc_insertion_point(field_add:Message.mz)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Message::mz() const {
  // @@protoc_insertion_point(field_list:Message.mz)
  return mz_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Message::mutable_mz() {
  // @@protoc_insertion_point(field_mutable_list:Message.mz)
  return &mz_;
}

// repeated uint32 tic = 2;
inline int Message::tic_size() const {
  return tic_.size();
}
inline void Message::clear_tic() {
  tic_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Message::tic(int index) const {
  // @@protoc_insertion_point(field_get:Message.tic)
  return tic_.Get(index);
}
inline void Message::set_tic(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tic_.Set(index, value);
  // @@protoc_insertion_point(field_set:Message.tic)
}
inline void Message::add_tic(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  tic_.Add(value);
  // @@protoc_insertion_point(field_add:Message.tic)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
Message::tic() const {
  // @@protoc_insertion_point(field_list:Message.tic)
  return tic_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
Message::mutable_tic() {
  // @@protoc_insertion_point(field_mutable_list:Message.tic)
  return &tic_;
}

// repeated uint64 time_stamps = 3;
inline int Message::time_stamps_size() const {
  return time_stamps_.size();
}
inline void Message::clear_time_stamps() {
  time_stamps_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Message::time_stamps(int index) const {
  // @@protoc_insertion_point(field_get:Message.time_stamps)
  return time_stamps_.Get(index);
}
inline void Message::set_time_stamps(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  time_stamps_.Set(index, value);
  // @@protoc_insertion_point(field_set:Message.time_stamps)
}
inline void Message::add_time_stamps(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  time_stamps_.Add(value);
  // @@protoc_insertion_point(field_add:Message.time_stamps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Message::time_stamps() const {
  // @@protoc_insertion_point(field_list:Message.time_stamps)
  return time_stamps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Message::mutable_time_stamps() {
  // @@protoc_insertion_point(field_mutable_list:Message.time_stamps)
  return &time_stamps_;
}

// -------------------------------------------------------------------

// TofWidthMessage

// uint64 pusher_pulse_width = 1;
inline void TofWidthMessage::clear_pusher_pulse_width() {
  pusher_pulse_width_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TofWidthMessage::pusher_pulse_width() const {
  // @@protoc_insertion_point(field_get:TofWidthMessage.pusher_pulse_width)
  return pusher_pulse_width_;
}
inline void TofWidthMessage::set_pusher_pulse_width(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  pusher_pulse_width_ = value;
  // @@protoc_insertion_point(field_set:TofWidthMessage.pusher_pulse_width)
}

// uint64 num_samples = 2;
inline void TofWidthMessage::clear_num_samples() {
  num_samples_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 TofWidthMessage::num_samples() const {
  // @@protoc_insertion_point(field_get:TofWidthMessage.num_samples)
  return num_samples_;
}
inline void TofWidthMessage::set_num_samples(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  num_samples_ = value;
  // @@protoc_insertion_point(field_set:TofWidthMessage.num_samples)
}

// -------------------------------------------------------------------

// SetupMessage

// double horizontal = 1;
inline void SetupMessage::clear_horizontal() {
  horizontal_ = 0;
}
inline double SetupMessage::horizontal() const {
  // @@protoc_insertion_point(field_get:SetupMessage.horizontal)
  return horizontal_;
}
inline void SetupMessage::set_horizontal(double value) {
  
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:SetupMessage.horizontal)
}

// double vertical = 2;
inline void SetupMessage::clear_vertical() {
  vertical_ = 0;
}
inline double SetupMessage::vertical() const {
  // @@protoc_insertion_point(field_get:SetupMessage.vertical)
  return vertical_;
}
inline void SetupMessage::set_vertical(double value) {
  
  vertical_ = value;
  // @@protoc_insertion_point(field_set:SetupMessage.vertical)
}

// .TrigClassMessage Trig = 3;
inline bool SetupMessage::has_trig() const {
  return this != internal_default_instance() && trig_ != nullptr;
}
inline void SetupMessage::clear_trig() {
  if (GetArenaNoVirtual() == nullptr && trig_ != nullptr) {
    delete trig_;
  }
  trig_ = nullptr;
}
inline const ::TrigClassMessage& SetupMessage::trig() const {
  const ::TrigClassMessage* p = trig_;
  // @@protoc_insertion_point(field_get:SetupMessage.Trig)
  return p != nullptr ? *p : *reinterpret_cast<const ::TrigClassMessage*>(
      &::_TrigClassMessage_default_instance_);
}
inline ::TrigClassMessage* SetupMessage::release_trig() {
  // @@protoc_insertion_point(field_release:SetupMessage.Trig)
  
  ::TrigClassMessage* temp = trig_;
  trig_ = nullptr;
  return temp;
}
inline ::TrigClassMessage* SetupMessage::mutable_trig() {
  
  if (trig_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrigClassMessage>(GetArenaNoVirtual());
    trig_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SetupMessage.Trig)
  return trig_;
}
inline void SetupMessage::set_allocated_trig(::TrigClassMessage* trig) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete trig_;
  }
  if (trig) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      trig = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, trig, submessage_arena);
    }
    
  } else {
    
  }
  trig_ = trig;
  // @@protoc_insertion_point(field_set_allocated:SetupMessage.Trig)
}

// .TrigSourceMessage Source = 4;
inline bool SetupMessage::has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline void SetupMessage::clear_source() {
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::TrigSourceMessage& SetupMessage::source() const {
  const ::TrigSourceMessage* p = source_;
  // @@protoc_insertion_point(field_get:SetupMessage.Source)
  return p != nullptr ? *p : *reinterpret_cast<const ::TrigSourceMessage*>(
      &::_TrigSourceMessage_default_instance_);
}
inline ::TrigSourceMessage* SetupMessage::release_source() {
  // @@protoc_insertion_point(field_release:SetupMessage.Source)
  
  ::TrigSourceMessage* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::TrigSourceMessage* SetupMessage::mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TrigSourceMessage>(GetArenaNoVirtual());
    source_ = p;
  }
  // @@protoc_insertion_point(field_mutable:SetupMessage.Source)
  return source_;
}
inline void SetupMessage::set_allocated_source(::TrigSourceMessage* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:SetupMessage.Source)
}

// -------------------------------------------------------------------

// TrigClassMessage

// .TrigClassMessage.TrigClass trig_class = 1;
inline void TrigClassMessage::clear_trig_class() {
  trig_class_ = 0;
}
inline ::TrigClassMessage_TrigClass TrigClassMessage::trig_class() const {
  // @@protoc_insertion_point(field_get:TrigClassMessage.trig_class)
  return static_cast< ::TrigClassMessage_TrigClass >(trig_class_);
}
inline void TrigClassMessage::set_trig_class(::TrigClassMessage_TrigClass value) {
  
  trig_class_ = value;
  // @@protoc_insertion_point(field_set:TrigClassMessage.trig_class)
}

// int32 source_pattern = 2;
inline void TrigClassMessage::clear_source_pattern() {
  source_pattern_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrigClassMessage::source_pattern() const {
  // @@protoc_insertion_point(field_get:TrigClassMessage.source_pattern)
  return source_pattern_;
}
inline void TrigClassMessage::set_source_pattern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_pattern_ = value;
  // @@protoc_insertion_point(field_set:TrigClassMessage.source_pattern)
}

// -------------------------------------------------------------------

// TrigSourceMessage

// int32 channel = 1;
inline void TrigSourceMessage::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrigSourceMessage::channel() const {
  // @@protoc_insertion_point(field_get:TrigSourceMessage.channel)
  return channel_;
}
inline void TrigSourceMessage::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:TrigSourceMessage.channel)
}

// .TrigSourceMessage.TrigCoupling trig_coupling = 2;
inline void TrigSourceMessage::clear_trig_coupling() {
  trig_coupling_ = 0;
}
inline ::TrigSourceMessage_TrigCoupling TrigSourceMessage::trig_coupling() const {
  // @@protoc_insertion_point(field_get:TrigSourceMessage.trig_coupling)
  return static_cast< ::TrigSourceMessage_TrigCoupling >(trig_coupling_);
}
inline void TrigSourceMessage::set_trig_coupling(::TrigSourceMessage_TrigCoupling value) {
  
  trig_coupling_ = value;
  // @@protoc_insertion_point(field_set:TrigSourceMessage.trig_coupling)
}

// double trig_level_1 = 3;
inline void TrigSourceMessage::clear_trig_level_1() {
  trig_level_1_ = 0;
}
inline double TrigSourceMessage::trig_level_1() const {
  // @@protoc_insertion_point(field_get:TrigSourceMessage.trig_level_1)
  return trig_level_1_;
}
inline void TrigSourceMessage::set_trig_level_1(double value) {
  
  trig_level_1_ = value;
  // @@protoc_insertion_point(field_set:TrigSourceMessage.trig_level_1)
}

// double trig_level_2 = 4;
inline void TrigSourceMessage::clear_trig_level_2() {
  trig_level_2_ = 0;
}
inline double TrigSourceMessage::trig_level_2() const {
  // @@protoc_insertion_point(field_get:TrigSourceMessage.trig_level_2)
  return trig_level_2_;
}
inline void TrigSourceMessage::set_trig_level_2(double value) {
  
  trig_level_2_ = value;
  // @@protoc_insertion_point(field_set:TrigSourceMessage.trig_level_2)
}

// -------------------------------------------------------------------

// UimfRequestMessage

// uint64 start_trigger = 1;
inline void UimfRequestMessage::clear_start_trigger() {
  start_trigger_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UimfRequestMessage::start_trigger() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.start_trigger)
  return start_trigger_;
}
inline void UimfRequestMessage::set_start_trigger(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  start_trigger_ = value;
  // @@protoc_insertion_point(field_set:UimfRequestMessage.start_trigger)
}

// uint64 nbr_samples = 2;
inline void UimfRequestMessage::clear_nbr_samples() {
  nbr_samples_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UimfRequestMessage::nbr_samples() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.nbr_samples)
  return nbr_samples_;
}
inline void UimfRequestMessage::set_nbr_samples(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nbr_samples_ = value;
  // @@protoc_insertion_point(field_set:UimfRequestMessage.nbr_samples)
}

// uint64 frame_length = 3;
inline void UimfRequestMessage::clear_frame_length() {
  frame_length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UimfRequestMessage::frame_length() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.frame_length)
  return frame_length_;
}
inline void UimfRequestMessage::set_frame_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  frame_length_ = value;
  // @@protoc_insertion_point(field_set:UimfRequestMessage.frame_length)
}

// uint64 nbr_accumulations = 4;
inline void UimfRequestMessage::clear_nbr_accumulations() {
  nbr_accumulations_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 UimfRequestMessage::nbr_accumulations() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.nbr_accumulations)
  return nbr_accumulations_;
}
inline void UimfRequestMessage::set_nbr_accumulations(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  nbr_accumulations_ = value;
  // @@protoc_insertion_point(field_set:UimfRequestMessage.nbr_accumulations)
}

// uint32 frame_number = 5;
inline void UimfRequestMessage::clear_frame_number() {
  frame_number_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UimfRequestMessage::frame_number() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.frame_number)
  return frame_number_;
}
inline void UimfRequestMessage::set_frame_number(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  frame_number_ = value;
  // @@protoc_insertion_point(field_set:UimfRequestMessage.frame_number)
}

// uint32 offset_bins = 6;
inline void UimfRequestMessage::clear_offset_bins() {
  offset_bins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UimfRequestMessage::offset_bins() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.offset_bins)
  return offset_bins_;
}
inline void UimfRequestMessage::set_offset_bins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  offset_bins_ = value;
  // @@protoc_insertion_point(field_set:UimfRequestMessage.offset_bins)
}

// string file_name = 7;
inline void UimfRequestMessage::clear_file_name() {
  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UimfRequestMessage::file_name() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.file_name)
  return file_name_.GetNoArena();
}
inline void UimfRequestMessage::set_file_name(const std::string& value) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:UimfRequestMessage.file_name)
}
inline void UimfRequestMessage::set_file_name(std::string&& value) {
  
  file_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UimfRequestMessage.file_name)
}
inline void UimfRequestMessage::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UimfRequestMessage.file_name)
}
inline void UimfRequestMessage::set_file_name(const char* value, size_t size) {
  
  file_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UimfRequestMessage.file_name)
}
inline std::string* UimfRequestMessage::mutable_file_name() {
  
  // @@protoc_insertion_point(field_mutable:UimfRequestMessage.file_name)
  return file_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UimfRequestMessage::release_file_name() {
  // @@protoc_insertion_point(field_release:UimfRequestMessage.file_name)
  
  return file_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UimfRequestMessage::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name);
  // @@protoc_insertion_point(field_set_allocated:UimfRequestMessage.file_name)
}

// .UimfRequestMessage.FrameType frame_type = 8;
inline void UimfRequestMessage::clear_frame_type() {
  frame_type_ = 0;
}
inline ::UimfRequestMessage_FrameType UimfRequestMessage::frame_type() const {
  // @@protoc_insertion_point(field_get:UimfRequestMessage.frame_type)
  return static_cast< ::UimfRequestMessage_FrameType >(frame_type_);
}
inline void UimfRequestMessage::set_frame_type(::UimfRequestMessage_FrameType value) {
  
  frame_type_ = value;
  // @@protoc_insertion_point(field_set:UimfRequestMessage.frame_type)
}

// -------------------------------------------------------------------

// DigitizerSetupMessage

// double horizontal = 1;
inline void DigitizerSetupMessage::clear_horizontal() {
  horizontal_ = 0;
}
inline double DigitizerSetupMessage::horizontal() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.horizontal)
  return horizontal_;
}
inline void DigitizerSetupMessage::set_horizontal(double value) {
  
  horizontal_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.horizontal)
}

// double vertical = 2;
inline void DigitizerSetupMessage::clear_vertical() {
  vertical_ = 0;
}
inline double DigitizerSetupMessage::vertical() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.vertical)
  return vertical_;
}
inline void DigitizerSetupMessage::set_vertical(double value) {
  
  vertical_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.vertical)
}

// double trig_class = 3;
inline void DigitizerSetupMessage::clear_trig_class() {
  trig_class_ = 0;
}
inline double DigitizerSetupMessage::trig_class() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.trig_class)
  return trig_class_;
}
inline void DigitizerSetupMessage::set_trig_class(double value) {
  
  trig_class_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.trig_class)
}

// double trig_source = 4;
inline void DigitizerSetupMessage::clear_trig_source() {
  trig_source_ = 0;
}
inline double DigitizerSetupMessage::trig_source() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.trig_source)
  return trig_source_;
}
inline void DigitizerSetupMessage::set_trig_source(double value) {
  
  trig_source_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.trig_source)
}

// int32 mode = 5;
inline void DigitizerSetupMessage::clear_mode() {
  mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DigitizerSetupMessage::mode() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.mode)
  return mode_;
}
inline void DigitizerSetupMessage::set_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.mode)
}

// uint32 samples = 6;
inline void DigitizerSetupMessage::clear_samples() {
  samples_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitizerSetupMessage::samples() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.samples)
  return samples_;
}
inline void DigitizerSetupMessage::set_samples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  samples_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.samples)
}

// uint32 segments = 7;
inline void DigitizerSetupMessage::clear_segments() {
  segments_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitizerSetupMessage::segments() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.segments)
  return segments_;
}
inline void DigitizerSetupMessage::set_segments(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  segments_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.segments)
}

// uint32 post_samples = 8;
inline void DigitizerSetupMessage::clear_post_samples() {
  post_samples_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitizerSetupMessage::post_samples() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.post_samples)
  return post_samples_;
}
inline void DigitizerSetupMessage::set_post_samples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  post_samples_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.post_samples)
}

// uint32 pre_samples = 9;
inline void DigitizerSetupMessage::clear_pre_samples() {
  pre_samples_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DigitizerSetupMessage::pre_samples() const {
  // @@protoc_insertion_point(field_get:DigitizerSetupMessage.pre_samples)
  return pre_samples_;
}
inline void DigitizerSetupMessage::set_pre_samples(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pre_samples_ = value;
  // @@protoc_insertion_point(field_set:DigitizerSetupMessage.pre_samples)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TrigClassMessage_TrigClass> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TrigClassMessage_TrigClass>() {
  return ::TrigClassMessage_TrigClass_descriptor();
}
template <> struct is_proto_enum< ::TrigSourceMessage_TrigCoupling> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TrigSourceMessage_TrigCoupling>() {
  return ::TrigSourceMessage_TrigCoupling_descriptor();
}
template <> struct is_proto_enum< ::TrigSourceMessage_TrigSlope> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TrigSourceMessage_TrigSlope>() {
  return ::TrigSourceMessage_TrigSlope_descriptor();
}
template <> struct is_proto_enum< ::UimfRequestMessage_FrameType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::UimfRequestMessage_FrameType>() {
  return ::UimfRequestMessage_FrameType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
