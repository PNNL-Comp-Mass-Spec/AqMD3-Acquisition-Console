// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "../include/message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Message::Message(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mz_()
  , _mz_cached_byte_size_(0)
  , tic_()
  , _tic_cached_byte_size_(0)
  , time_stamps_()
  , _time_stamps_cached_byte_size_(0){}
struct MessageDefaultTypeInternal {
  constexpr MessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDefaultTypeInternal() {}
  union {
    Message _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDefaultTypeInternal _Message_default_instance_;
constexpr TofWidthMessage::TofWidthMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : pusher_pulse_width_(uint64_t{0u})
  , num_samples_(uint64_t{0u}){}
struct TofWidthMessageDefaultTypeInternal {
  constexpr TofWidthMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TofWidthMessageDefaultTypeInternal() {}
  union {
    TofWidthMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TofWidthMessageDefaultTypeInternal _TofWidthMessage_default_instance_;
constexpr SetupMessage::SetupMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trig_(nullptr)
  , source_(nullptr)
  , horizontal_(0)
  , vertical_(0){}
struct SetupMessageDefaultTypeInternal {
  constexpr SetupMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetupMessageDefaultTypeInternal() {}
  union {
    SetupMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetupMessageDefaultTypeInternal _SetupMessage_default_instance_;
constexpr TrigClassMessage::TrigClassMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : trig_class_(0)

  , source_pattern_(0){}
struct TrigClassMessageDefaultTypeInternal {
  constexpr TrigClassMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrigClassMessageDefaultTypeInternal() {}
  union {
    TrigClassMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrigClassMessageDefaultTypeInternal _TrigClassMessage_default_instance_;
constexpr TrigSourceMessage::TrigSourceMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(0)
  , trig_coupling_(0)

  , trig_level_1_(0)
  , trig_level_2_(0){}
struct TrigSourceMessageDefaultTypeInternal {
  constexpr TrigSourceMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TrigSourceMessageDefaultTypeInternal() {}
  union {
    TrigSourceMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TrigSourceMessageDefaultTypeInternal _TrigSourceMessage_default_instance_;
constexpr UimfRequestMessage::UimfRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : file_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , start_trigger_(uint64_t{0u})
  , nbr_samples_(uint64_t{0u})
  , frame_length_(uint64_t{0u})
  , nbr_accumulations_(uint64_t{0u})
  , frame_number_(0u)
  , offset_bins_(0u)
  , frame_type_(0)
{}
struct UimfRequestMessageDefaultTypeInternal {
  constexpr UimfRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UimfRequestMessageDefaultTypeInternal() {}
  union {
    UimfRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UimfRequestMessageDefaultTypeInternal _UimfRequestMessage_default_instance_;
constexpr DigitizerSetupMessage::DigitizerSetupMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : horizontal_(0)
  , vertical_(0)
  , trig_class_(0)
  , trig_source_(0)
  , mode_(0)
  , samples_(0u)
  , segments_(0u)
  , post_samples_(0u)
  , pre_samples_(0u){}
struct DigitizerSetupMessageDefaultTypeInternal {
  constexpr DigitizerSetupMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DigitizerSetupMessageDefaultTypeInternal() {}
  union {
    DigitizerSetupMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DigitizerSetupMessageDefaultTypeInternal _DigitizerSetupMessage_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Message, mz_),
  PROTOBUF_FIELD_OFFSET(::Message, tic_),
  PROTOBUF_FIELD_OFFSET(::Message, time_stamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TofWidthMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TofWidthMessage, pusher_pulse_width_),
  PROTOBUF_FIELD_OFFSET(::TofWidthMessage, num_samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, horizontal_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, vertical_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, trig_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrigClassMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrigClassMessage, trig_class_),
  PROTOBUF_FIELD_OFFSET(::TrigClassMessage, source_pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, channel_),
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, trig_coupling_),
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, trig_level_1_),
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, trig_level_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, start_trigger_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, nbr_samples_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, frame_length_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, nbr_accumulations_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, frame_number_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, offset_bins_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, file_name_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, frame_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, horizontal_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, vertical_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, trig_class_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, trig_source_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, mode_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, samples_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, segments_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, post_samples_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, pre_samples_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Message)},
  { 9, -1, -1, sizeof(::TofWidthMessage)},
  { 17, -1, -1, sizeof(::SetupMessage)},
  { 27, -1, -1, sizeof(::TrigClassMessage)},
  { 35, -1, -1, sizeof(::TrigSourceMessage)},
  { 45, -1, -1, sizeof(::UimfRequestMessage)},
  { 59, -1, -1, sizeof(::DigitizerSetupMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TofWidthMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrigClassMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrigSourceMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UimfRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DigitizerSetupMessage_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\"7\n\007Message\022\n\n\002mz\030\001 \003(\005\022\013"
  "\n\003tic\030\002 \003(\r\022\023\n\013time_stamps\030\003 \003(\004\"B\n\017TofW"
  "idthMessage\022\032\n\022pusher_pulse_width\030\001 \001(\004\022"
  "\023\n\013num_samples\030\002 \001(\004\"y\n\014SetupMessage\022\022\n\n"
  "horizontal\030\001 \001(\001\022\020\n\010vertical\030\002 \001(\001\022\037\n\004Tr"
  "ig\030\003 \001(\0132\021.TrigClassMessage\022\"\n\006Source\030\004 "
  "\001(\0132\022.TrigSourceMessage\"\236\001\n\020TrigClassMes"
  "sage\022/\n\ntrig_class\030\001 \001(\0162\033.TrigClassMess"
  "age.TrigClass\022\026\n\016source_pattern\030\002 \001(\005\"A\n"
  "\tTrigClass\022\010\n\004Edge\020\000\022\006\n\002Tv\020\001\022\006\n\002Or\020\003\022\007\n\003"
  "Nor\020\004\022\007\n\003And\020\005\022\010\n\004Nand\020\006\"\373\001\n\021TrigSourceM"
  "essage\022\017\n\007channel\030\001 \001(\005\0226\n\rtrig_coupling"
  "\030\002 \001(\0162\037.TrigSourceMessage.TrigCoupling\022"
  "\024\n\014trig_level_1\030\003 \001(\001\022\024\n\014trig_level_2\030\004 "
  "\001(\001\"H\n\014TrigCoupling\022\006\n\002Dc\020\000\022\006\n\002Ac\020\001\022\014\n\010H"
  "fReject\020\002\022\014\n\010Dc50Ohms\020\003\022\014\n\010Ac50Ohms\020\004\"\'\n"
  "\tTrigSlope\022\014\n\010Positive\020\000\022\014\n\010Negative\020\001\"\237"
  "\002\n\022UimfRequestMessage\022\025\n\rstart_trigger\030\001"
  " \001(\004\022\023\n\013nbr_samples\030\002 \001(\004\022\024\n\014frame_lengt"
  "h\030\003 \001(\004\022\031\n\021nbr_accumulations\030\004 \001(\004\022\024\n\014fr"
  "ame_number\030\005 \001(\r\022\023\n\013offset_bins\030\006 \001(\r\022\021\n"
  "\tfile_name\030\007 \001(\t\0221\n\nframe_type\030\010 \001(\0162\035.U"
  "imfRequestMessage.FrameType\";\n\tFrameType"
  "\022\006\n\002MS\020\000\022\010\n\004MSMS\020\001\022\017\n\013Calibration\020\002\022\013\n\007P"
  "rescan\020\003\"\302\001\n\025DigitizerSetupMessage\022\022\n\nho"
  "rizontal\030\001 \001(\001\022\020\n\010vertical\030\002 \001(\001\022\022\n\ntrig"
  "_class\030\003 \001(\001\022\023\n\013trig_source\030\004 \001(\001\022\014\n\004mod"
  "e\030\005 \001(\005\022\017\n\007samples\030\006 \001(\r\022\020\n\010segments\030\007 \001"
  "(\r\022\024\n\014post_samples\030\010 \001(\r\022\023\n\013pre_samples\030"
  "\t \001(\rb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  false, false, 1173, descriptor_table_protodef_message_2eproto, "message.proto", 
  &descriptor_table_message_2eproto_once, nullptr, 0, 7,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigClassMessage_TrigClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool TrigClassMessage_TrigClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrigClassMessage_TrigClass TrigClassMessage::Edge;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Tv;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Or;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Nor;
constexpr TrigClassMessage_TrigClass TrigClassMessage::And;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Nand;
constexpr TrigClassMessage_TrigClass TrigClassMessage::TrigClass_MIN;
constexpr TrigClassMessage_TrigClass TrigClassMessage::TrigClass_MAX;
constexpr int TrigClassMessage::TrigClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigSourceMessage_TrigCoupling_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool TrigSourceMessage_TrigCoupling_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Dc;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Ac;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::HfReject;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Dc50Ohms;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Ac50Ohms;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::TrigCoupling_MIN;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::TrigCoupling_MAX;
constexpr int TrigSourceMessage::TrigCoupling_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigSourceMessage_TrigSlope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[2];
}
bool TrigSourceMessage_TrigSlope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::Positive;
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::Negative;
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::TrigSlope_MIN;
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::TrigSlope_MAX;
constexpr int TrigSourceMessage::TrigSlope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UimfRequestMessage_FrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[3];
}
bool UimfRequestMessage_FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UimfRequestMessage_FrameType UimfRequestMessage::MS;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::MSMS;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::Calibration;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::Prescan;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::FrameType_MIN;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::FrameType_MAX;
constexpr int UimfRequestMessage::FrameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Message::_Internal {
 public:
};

Message::Message(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mz_(arena),
  tic_(arena),
  time_stamps_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mz_(from.mz_),
      tic_(from.tic_),
      time_stamps_(from.time_stamps_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Message::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Message::ArenaDtor(void* object) {
  Message* _this = reinterpret_cast< Message* >(object);
  (void)_this;
}
void Message::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mz_.Clear();
  tic_.Clear();
  time_stamps_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 mz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_mz(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_mz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 tic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_tic(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_tic(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 time_stamps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_time_stamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_time_stamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 mz = 1;
  {
    int byte_size = _mz_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_mz(), byte_size, target);
    }
  }

  // repeated uint32 tic = 2;
  {
    int byte_size = _tic_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, _internal_tic(), byte_size, target);
    }
  }

  // repeated uint64 time_stamps = 3;
  {
    int byte_size = _time_stamps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, _internal_time_stamps(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mz = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->mz_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mz_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 tic = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tic_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tic_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 time_stamps = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->time_stamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _time_stamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Message::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Message::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Message::GetClassData() const { return &_class_data_; }

void Message::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Message *>(to)->MergeFrom(
      static_cast<const Message &>(from));
}


void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mz_.MergeFrom(from.mz_);
  tic_.MergeFrom(from.tic_);
  time_stamps_.MergeFrom(from.time_stamps_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mz_.InternalSwap(&other->mz_);
  tic_.InternalSwap(&other->tic_);
  time_stamps_.InternalSwap(&other->time_stamps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class TofWidthMessage::_Internal {
 public:
};

TofWidthMessage::TofWidthMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TofWidthMessage)
}
TofWidthMessage::TofWidthMessage(const TofWidthMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pusher_pulse_width_, &from.pusher_pulse_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_samples_) -
    reinterpret_cast<char*>(&pusher_pulse_width_)) + sizeof(num_samples_));
  // @@protoc_insertion_point(copy_constructor:TofWidthMessage)
}

void TofWidthMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pusher_pulse_width_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&num_samples_) -
    reinterpret_cast<char*>(&pusher_pulse_width_)) + sizeof(num_samples_));
}

TofWidthMessage::~TofWidthMessage() {
  // @@protoc_insertion_point(destructor:TofWidthMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TofWidthMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TofWidthMessage::ArenaDtor(void* object) {
  TofWidthMessage* _this = reinterpret_cast< TofWidthMessage* >(object);
  (void)_this;
}
void TofWidthMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TofWidthMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TofWidthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TofWidthMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pusher_pulse_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_samples_) -
      reinterpret_cast<char*>(&pusher_pulse_width_)) + sizeof(num_samples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TofWidthMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 pusher_pulse_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pusher_pulse_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 num_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TofWidthMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TofWidthMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pusher_pulse_width = 1;
  if (this->_internal_pusher_pulse_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_pusher_pulse_width(), target);
  }

  // uint64 num_samples = 2;
  if (this->_internal_num_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_num_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TofWidthMessage)
  return target;
}

size_t TofWidthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TofWidthMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pusher_pulse_width = 1;
  if (this->_internal_pusher_pulse_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_pusher_pulse_width());
  }

  // uint64 num_samples = 2;
  if (this->_internal_num_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_num_samples());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TofWidthMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TofWidthMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TofWidthMessage::GetClassData() const { return &_class_data_; }

void TofWidthMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TofWidthMessage *>(to)->MergeFrom(
      static_cast<const TofWidthMessage &>(from));
}


void TofWidthMessage::MergeFrom(const TofWidthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TofWidthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_pusher_pulse_width() != 0) {
    _internal_set_pusher_pulse_width(from._internal_pusher_pulse_width());
  }
  if (from._internal_num_samples() != 0) {
    _internal_set_num_samples(from._internal_num_samples());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TofWidthMessage::CopyFrom(const TofWidthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TofWidthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TofWidthMessage::IsInitialized() const {
  return true;
}

void TofWidthMessage::InternalSwap(TofWidthMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TofWidthMessage, num_samples_)
      + sizeof(TofWidthMessage::num_samples_)
      - PROTOBUF_FIELD_OFFSET(TofWidthMessage, pusher_pulse_width_)>(
          reinterpret_cast<char*>(&pusher_pulse_width_),
          reinterpret_cast<char*>(&other->pusher_pulse_width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TofWidthMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

class SetupMessage::_Internal {
 public:
  static const ::TrigClassMessage& trig(const SetupMessage* msg);
  static const ::TrigSourceMessage& source(const SetupMessage* msg);
};

const ::TrigClassMessage&
SetupMessage::_Internal::trig(const SetupMessage* msg) {
  return *msg->trig_;
}
const ::TrigSourceMessage&
SetupMessage::_Internal::source(const SetupMessage* msg) {
  return *msg->source_;
}
SetupMessage::SetupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:SetupMessage)
}
SetupMessage::SetupMessage(const SetupMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_trig()) {
    trig_ = new ::TrigClassMessage(*from.trig_);
  } else {
    trig_ = nullptr;
  }
  if (from._internal_has_source()) {
    source_ = new ::TrigSourceMessage(*from.source_);
  } else {
    source_ = nullptr;
  }
  ::memcpy(&horizontal_, &from.horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_) -
    reinterpret_cast<char*>(&horizontal_)) + sizeof(vertical_));
  // @@protoc_insertion_point(copy_constructor:SetupMessage)
}

void SetupMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trig_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&vertical_) -
    reinterpret_cast<char*>(&trig_)) + sizeof(vertical_));
}

SetupMessage::~SetupMessage() {
  // @@protoc_insertion_point(destructor:SetupMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetupMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete trig_;
  if (this != internal_default_instance()) delete source_;
}

void SetupMessage::ArenaDtor(void* object) {
  SetupMessage* _this = reinterpret_cast< SetupMessage* >(object);
  (void)_this;
}
void SetupMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetupMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && trig_ != nullptr) {
    delete trig_;
  }
  trig_ = nullptr;
  if (GetArenaForAllocation() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  ::memset(&horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_) -
      reinterpret_cast<char*>(&horizontal_)) + sizeof(vertical_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetupMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double horizontal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vertical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .TrigClassMessage Trig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_trig(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TrigSourceMessage Source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_source(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->_internal_horizontal() <= 0 && this->_internal_horizontal() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_horizontal(), target);
  }

  // double vertical = 2;
  if (!(this->_internal_vertical() <= 0 && this->_internal_vertical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_vertical(), target);
  }

  // .TrigClassMessage Trig = 3;
  if (this->_internal_has_trig()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::trig(this), target, stream);
  }

  // .TrigSourceMessage Source = 4;
  if (this->_internal_has_source()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::source(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupMessage)
  return target;
}

size_t SetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TrigClassMessage Trig = 3;
  if (this->_internal_has_trig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trig_);
  }

  // .TrigSourceMessage Source = 4;
  if (this->_internal_has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // double horizontal = 1;
  if (!(this->_internal_horizontal() <= 0 && this->_internal_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double vertical = 2;
  if (!(this->_internal_vertical() <= 0 && this->_internal_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetupMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetupMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetupMessage::GetClassData() const { return &_class_data_; }

void SetupMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetupMessage *>(to)->MergeFrom(
      static_cast<const SetupMessage &>(from));
}


void SetupMessage::MergeFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_trig()) {
    _internal_mutable_trig()->::TrigClassMessage::MergeFrom(from._internal_trig());
  }
  if (from._internal_has_source()) {
    _internal_mutable_source()->::TrigSourceMessage::MergeFrom(from._internal_source());
  }
  if (!(from._internal_horizontal() <= 0 && from._internal_horizontal() >= 0)) {
    _internal_set_horizontal(from._internal_horizontal());
  }
  if (!(from._internal_vertical() <= 0 && from._internal_vertical() >= 0)) {
    _internal_set_vertical(from._internal_vertical());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetupMessage::CopyFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMessage::IsInitialized() const {
  return true;
}

void SetupMessage::InternalSwap(SetupMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetupMessage, vertical_)
      + sizeof(SetupMessage::vertical_)
      - PROTOBUF_FIELD_OFFSET(SetupMessage, trig_)>(
          reinterpret_cast<char*>(&trig_),
          reinterpret_cast<char*>(&other->trig_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[2]);
}

// ===================================================================

class TrigClassMessage::_Internal {
 public:
};

TrigClassMessage::TrigClassMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TrigClassMessage)
}
TrigClassMessage::TrigClassMessage(const TrigClassMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&trig_class_, &from.trig_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_pattern_) -
    reinterpret_cast<char*>(&trig_class_)) + sizeof(source_pattern_));
  // @@protoc_insertion_point(copy_constructor:TrigClassMessage)
}

void TrigClassMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&trig_class_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&source_pattern_) -
    reinterpret_cast<char*>(&trig_class_)) + sizeof(source_pattern_));
}

TrigClassMessage::~TrigClassMessage() {
  // @@protoc_insertion_point(destructor:TrigClassMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrigClassMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrigClassMessage::ArenaDtor(void* object) {
  TrigClassMessage* _this = reinterpret_cast< TrigClassMessage* >(object);
  (void)_this;
}
void TrigClassMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrigClassMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrigClassMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TrigClassMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trig_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_pattern_) -
      reinterpret_cast<char*>(&trig_class_)) + sizeof(source_pattern_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrigClassMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .TrigClassMessage.TrigClass trig_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trig_class(static_cast<::TrigClassMessage_TrigClass>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 source_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrigClassMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrigClassMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrigClassMessage.TrigClass trig_class = 1;
  if (this->_internal_trig_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_trig_class(), target);
  }

  // int32 source_pattern = 2;
  if (this->_internal_source_pattern() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_source_pattern(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrigClassMessage)
  return target;
}

size_t TrigClassMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrigClassMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TrigClassMessage.TrigClass trig_class = 1;
  if (this->_internal_trig_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trig_class());
  }

  // int32 source_pattern = 2;
  if (this->_internal_source_pattern() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_source_pattern());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrigClassMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrigClassMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrigClassMessage::GetClassData() const { return &_class_data_; }

void TrigClassMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrigClassMessage *>(to)->MergeFrom(
      static_cast<const TrigClassMessage &>(from));
}


void TrigClassMessage::MergeFrom(const TrigClassMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrigClassMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_trig_class() != 0) {
    _internal_set_trig_class(from._internal_trig_class());
  }
  if (from._internal_source_pattern() != 0) {
    _internal_set_source_pattern(from._internal_source_pattern());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrigClassMessage::CopyFrom(const TrigClassMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrigClassMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrigClassMessage::IsInitialized() const {
  return true;
}

void TrigClassMessage::InternalSwap(TrigClassMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrigClassMessage, source_pattern_)
      + sizeof(TrigClassMessage::source_pattern_)
      - PROTOBUF_FIELD_OFFSET(TrigClassMessage, trig_class_)>(
          reinterpret_cast<char*>(&trig_class_),
          reinterpret_cast<char*>(&other->trig_class_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrigClassMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[3]);
}

// ===================================================================

class TrigSourceMessage::_Internal {
 public:
};

TrigSourceMessage::TrigSourceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:TrigSourceMessage)
}
TrigSourceMessage::TrigSourceMessage(const TrigSourceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&trig_level_2_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(trig_level_2_));
  // @@protoc_insertion_point(copy_constructor:TrigSourceMessage)
}

void TrigSourceMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&trig_level_2_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(trig_level_2_));
}

TrigSourceMessage::~TrigSourceMessage() {
  // @@protoc_insertion_point(destructor:TrigSourceMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TrigSourceMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TrigSourceMessage::ArenaDtor(void* object) {
  TrigSourceMessage* _this = reinterpret_cast< TrigSourceMessage* >(object);
  (void)_this;
}
void TrigSourceMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrigSourceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TrigSourceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TrigSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trig_level_2_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(trig_level_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrigSourceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_trig_coupling(static_cast<::TrigSourceMessage_TrigCoupling>(val));
        } else
          goto handle_unusual;
        continue;
      // double trig_level_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          trig_level_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double trig_level_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          trig_level_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrigSourceMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrigSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_channel(), target);
  }

  // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
  if (this->_internal_trig_coupling() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_trig_coupling(), target);
  }

  // double trig_level_1 = 3;
  if (!(this->_internal_trig_level_1() <= 0 && this->_internal_trig_level_1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_trig_level_1(), target);
  }

  // double trig_level_2 = 4;
  if (!(this->_internal_trig_level_2() <= 0 && this->_internal_trig_level_2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_trig_level_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrigSourceMessage)
  return target;
}

size_t TrigSourceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrigSourceMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->_internal_channel() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_channel());
  }

  // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
  if (this->_internal_trig_coupling() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trig_coupling());
  }

  // double trig_level_1 = 3;
  if (!(this->_internal_trig_level_1() <= 0 && this->_internal_trig_level_1() >= 0)) {
    total_size += 1 + 8;
  }

  // double trig_level_2 = 4;
  if (!(this->_internal_trig_level_2() <= 0 && this->_internal_trig_level_2() >= 0)) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TrigSourceMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TrigSourceMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TrigSourceMessage::GetClassData() const { return &_class_data_; }

void TrigSourceMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TrigSourceMessage *>(to)->MergeFrom(
      static_cast<const TrigSourceMessage &>(from));
}


void TrigSourceMessage::MergeFrom(const TrigSourceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrigSourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_channel() != 0) {
    _internal_set_channel(from._internal_channel());
  }
  if (from._internal_trig_coupling() != 0) {
    _internal_set_trig_coupling(from._internal_trig_coupling());
  }
  if (!(from._internal_trig_level_1() <= 0 && from._internal_trig_level_1() >= 0)) {
    _internal_set_trig_level_1(from._internal_trig_level_1());
  }
  if (!(from._internal_trig_level_2() <= 0 && from._internal_trig_level_2() >= 0)) {
    _internal_set_trig_level_2(from._internal_trig_level_2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TrigSourceMessage::CopyFrom(const TrigSourceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrigSourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrigSourceMessage::IsInitialized() const {
  return true;
}

void TrigSourceMessage::InternalSwap(TrigSourceMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrigSourceMessage, trig_level_2_)
      + sizeof(TrigSourceMessage::trig_level_2_)
      - PROTOBUF_FIELD_OFFSET(TrigSourceMessage, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrigSourceMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[4]);
}

// ===================================================================

class UimfRequestMessage::_Internal {
 public:
};

UimfRequestMessage::UimfRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:UimfRequestMessage)
}
UimfRequestMessage::UimfRequestMessage(const UimfRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&start_trigger_, &from.start_trigger_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_type_) -
    reinterpret_cast<char*>(&start_trigger_)) + sizeof(frame_type_));
  // @@protoc_insertion_point(copy_constructor:UimfRequestMessage)
}

void UimfRequestMessage::SharedCtor() {
file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_trigger_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&frame_type_) -
    reinterpret_cast<char*>(&start_trigger_)) + sizeof(frame_type_));
}

UimfRequestMessage::~UimfRequestMessage() {
  // @@protoc_insertion_point(destructor:UimfRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UimfRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UimfRequestMessage::ArenaDtor(void* object) {
  UimfRequestMessage* _this = reinterpret_cast< UimfRequestMessage* >(object);
  (void)_this;
}
void UimfRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UimfRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UimfRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:UimfRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  ::memset(&start_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type_) -
      reinterpret_cast<char*>(&start_trigger_)) + sizeof(frame_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UimfRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 start_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nbr_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nbr_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 frame_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 nbr_accumulations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nbr_accumulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 frame_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 offset_bins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offset_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string file_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UimfRequestMessage.file_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .UimfRequestMessage.FrameType frame_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_frame_type(static_cast<::UimfRequestMessage_FrameType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UimfRequestMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UimfRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_trigger = 1;
  if (this->_internal_start_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_start_trigger(), target);
  }

  // uint64 nbr_samples = 2;
  if (this->_internal_nbr_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_nbr_samples(), target);
  }

  // uint64 frame_length = 3;
  if (this->_internal_frame_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_frame_length(), target);
  }

  // uint64 nbr_accumulations = 4;
  if (this->_internal_nbr_accumulations() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_nbr_accumulations(), target);
  }

  // uint32 frame_number = 5;
  if (this->_internal_frame_number() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_frame_number(), target);
  }

  // uint32 offset_bins = 6;
  if (this->_internal_offset_bins() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_offset_bins(), target);
  }

  // string file_name = 7;
  if (!this->_internal_file_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UimfRequestMessage.file_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_file_name(), target);
  }

  // .UimfRequestMessage.FrameType frame_type = 8;
  if (this->_internal_frame_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_frame_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UimfRequestMessage)
  return target;
}

size_t UimfRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UimfRequestMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 7;
  if (!this->_internal_file_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // uint64 start_trigger = 1;
  if (this->_internal_start_trigger() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_start_trigger());
  }

  // uint64 nbr_samples = 2;
  if (this->_internal_nbr_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nbr_samples());
  }

  // uint64 frame_length = 3;
  if (this->_internal_frame_length() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_frame_length());
  }

  // uint64 nbr_accumulations = 4;
  if (this->_internal_nbr_accumulations() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_nbr_accumulations());
  }

  // uint32 frame_number = 5;
  if (this->_internal_frame_number() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_frame_number());
  }

  // uint32 offset_bins = 6;
  if (this->_internal_offset_bins() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_offset_bins());
  }

  // .UimfRequestMessage.FrameType frame_type = 8;
  if (this->_internal_frame_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_frame_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UimfRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UimfRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UimfRequestMessage::GetClassData() const { return &_class_data_; }

void UimfRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UimfRequestMessage *>(to)->MergeFrom(
      static_cast<const UimfRequestMessage &>(from));
}


void UimfRequestMessage::MergeFrom(const UimfRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UimfRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_file_name().empty()) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from._internal_start_trigger() != 0) {
    _internal_set_start_trigger(from._internal_start_trigger());
  }
  if (from._internal_nbr_samples() != 0) {
    _internal_set_nbr_samples(from._internal_nbr_samples());
  }
  if (from._internal_frame_length() != 0) {
    _internal_set_frame_length(from._internal_frame_length());
  }
  if (from._internal_nbr_accumulations() != 0) {
    _internal_set_nbr_accumulations(from._internal_nbr_accumulations());
  }
  if (from._internal_frame_number() != 0) {
    _internal_set_frame_number(from._internal_frame_number());
  }
  if (from._internal_offset_bins() != 0) {
    _internal_set_offset_bins(from._internal_offset_bins());
  }
  if (from._internal_frame_type() != 0) {
    _internal_set_frame_type(from._internal_frame_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UimfRequestMessage::CopyFrom(const UimfRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UimfRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UimfRequestMessage::IsInitialized() const {
  return true;
}

void UimfRequestMessage::InternalSwap(UimfRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &file_name_, lhs_arena,
      &other->file_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UimfRequestMessage, frame_type_)
      + sizeof(UimfRequestMessage::frame_type_)
      - PROTOBUF_FIELD_OFFSET(UimfRequestMessage, start_trigger_)>(
          reinterpret_cast<char*>(&start_trigger_),
          reinterpret_cast<char*>(&other->start_trigger_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UimfRequestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[5]);
}

// ===================================================================

class DigitizerSetupMessage::_Internal {
 public:
};

DigitizerSetupMessage::DigitizerSetupMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:DigitizerSetupMessage)
}
DigitizerSetupMessage::DigitizerSetupMessage(const DigitizerSetupMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&horizontal_, &from.horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_samples_) -
    reinterpret_cast<char*>(&horizontal_)) + sizeof(pre_samples_));
  // @@protoc_insertion_point(copy_constructor:DigitizerSetupMessage)
}

void DigitizerSetupMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&horizontal_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pre_samples_) -
    reinterpret_cast<char*>(&horizontal_)) + sizeof(pre_samples_));
}

DigitizerSetupMessage::~DigitizerSetupMessage() {
  // @@protoc_insertion_point(destructor:DigitizerSetupMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DigitizerSetupMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigitizerSetupMessage::ArenaDtor(void* object) {
  DigitizerSetupMessage* _this = reinterpret_cast< DigitizerSetupMessage* >(object);
  (void)_this;
}
void DigitizerSetupMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DigitizerSetupMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitizerSetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitizerSetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_samples_) -
      reinterpret_cast<char*>(&horizontal_)) + sizeof(pre_samples_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitizerSetupMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double horizontal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double vertical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double trig_class = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          trig_class_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double trig_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          trig_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // int32 mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 samples = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 segments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 post_samples = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          post_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pre_samples = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pre_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitizerSetupMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitizerSetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->_internal_horizontal() <= 0 && this->_internal_horizontal() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_horizontal(), target);
  }

  // double vertical = 2;
  if (!(this->_internal_vertical() <= 0 && this->_internal_vertical() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_vertical(), target);
  }

  // double trig_class = 3;
  if (!(this->_internal_trig_class() <= 0 && this->_internal_trig_class() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_trig_class(), target);
  }

  // double trig_source = 4;
  if (!(this->_internal_trig_source() <= 0 && this->_internal_trig_source() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_trig_source(), target);
  }

  // int32 mode = 5;
  if (this->_internal_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_mode(), target);
  }

  // uint32 samples = 6;
  if (this->_internal_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_samples(), target);
  }

  // uint32 segments = 7;
  if (this->_internal_segments() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_segments(), target);
  }

  // uint32 post_samples = 8;
  if (this->_internal_post_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_post_samples(), target);
  }

  // uint32 pre_samples = 9;
  if (this->_internal_pre_samples() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_pre_samples(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitizerSetupMessage)
  return target;
}

size_t DigitizerSetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitizerSetupMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->_internal_horizontal() <= 0 && this->_internal_horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double vertical = 2;
  if (!(this->_internal_vertical() <= 0 && this->_internal_vertical() >= 0)) {
    total_size += 1 + 8;
  }

  // double trig_class = 3;
  if (!(this->_internal_trig_class() <= 0 && this->_internal_trig_class() >= 0)) {
    total_size += 1 + 8;
  }

  // double trig_source = 4;
  if (!(this->_internal_trig_source() <= 0 && this->_internal_trig_source() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 mode = 5;
  if (this->_internal_mode() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_mode());
  }

  // uint32 samples = 6;
  if (this->_internal_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_samples());
  }

  // uint32 segments = 7;
  if (this->_internal_segments() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_segments());
  }

  // uint32 post_samples = 8;
  if (this->_internal_post_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_post_samples());
  }

  // uint32 pre_samples = 9;
  if (this->_internal_pre_samples() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pre_samples());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitizerSetupMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitizerSetupMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitizerSetupMessage::GetClassData() const { return &_class_data_; }

void DigitizerSetupMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitizerSetupMessage *>(to)->MergeFrom(
      static_cast<const DigitizerSetupMessage &>(from));
}


void DigitizerSetupMessage::MergeFrom(const DigitizerSetupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitizerSetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from._internal_horizontal() <= 0 && from._internal_horizontal() >= 0)) {
    _internal_set_horizontal(from._internal_horizontal());
  }
  if (!(from._internal_vertical() <= 0 && from._internal_vertical() >= 0)) {
    _internal_set_vertical(from._internal_vertical());
  }
  if (!(from._internal_trig_class() <= 0 && from._internal_trig_class() >= 0)) {
    _internal_set_trig_class(from._internal_trig_class());
  }
  if (!(from._internal_trig_source() <= 0 && from._internal_trig_source() >= 0)) {
    _internal_set_trig_source(from._internal_trig_source());
  }
  if (from._internal_mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from._internal_samples() != 0) {
    _internal_set_samples(from._internal_samples());
  }
  if (from._internal_segments() != 0) {
    _internal_set_segments(from._internal_segments());
  }
  if (from._internal_post_samples() != 0) {
    _internal_set_post_samples(from._internal_post_samples());
  }
  if (from._internal_pre_samples() != 0) {
    _internal_set_pre_samples(from._internal_pre_samples());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitizerSetupMessage::CopyFrom(const DigitizerSetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitizerSetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitizerSetupMessage::IsInitialized() const {
  return true;
}

void DigitizerSetupMessage::InternalSwap(DigitizerSetupMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DigitizerSetupMessage, pre_samples_)
      + sizeof(DigitizerSetupMessage::pre_samples_)
      - PROTOBUF_FIELD_OFFSET(DigitizerSetupMessage, horizontal_)>(
          reinterpret_cast<char*>(&horizontal_),
          reinterpret_cast<char*>(&other->horizontal_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitizerSetupMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Message* Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::TofWidthMessage* Arena::CreateMaybeMessage< ::TofWidthMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TofWidthMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupMessage* Arena::CreateMaybeMessage< ::SetupMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SetupMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TrigClassMessage* Arena::CreateMaybeMessage< ::TrigClassMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrigClassMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TrigSourceMessage* Arena::CreateMaybeMessage< ::TrigSourceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TrigSourceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::UimfRequestMessage* Arena::CreateMaybeMessage< ::UimfRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::UimfRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DigitizerSetupMessage* Arena::CreateMaybeMessage< ::DigitizerSetupMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DigitizerSetupMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
