// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "../include/message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrigClassMessage_message_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_message_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrigSourceMessage_message_2eproto;
class MessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Message> _instance;
} _Message_default_instance_;
class TofWidthMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TofWidthMessage> _instance;
} _TofWidthMessage_default_instance_;
class SetupMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SetupMessage> _instance;
} _SetupMessage_default_instance_;
class TrigClassMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrigClassMessage> _instance;
} _TrigClassMessage_default_instance_;
class TrigSourceMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrigSourceMessage> _instance;
} _TrigSourceMessage_default_instance_;
class UimfRequestMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UimfRequestMessage> _instance;
} _UimfRequestMessage_default_instance_;
class DigitizerSetupMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DigitizerSetupMessage> _instance;
} _DigitizerSetupMessage_default_instance_;
static void InitDefaultsscc_info_DigitizerSetupMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DigitizerSetupMessage_default_instance_;
    new (ptr) ::DigitizerSetupMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DigitizerSetupMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DigitizerSetupMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_DigitizerSetupMessage_message_2eproto}, {}};

static void InitDefaultsscc_info_Message_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Message_default_instance_;
    new (ptr) ::Message();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Message::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Message_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_Message_message_2eproto}, {}};

static void InitDefaultsscc_info_SetupMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SetupMessage_default_instance_;
    new (ptr) ::SetupMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SetupMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SetupMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsscc_info_SetupMessage_message_2eproto}, {
      &scc_info_TrigClassMessage_message_2eproto.base,
      &scc_info_TrigSourceMessage_message_2eproto.base,}};

static void InitDefaultsscc_info_TofWidthMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TofWidthMessage_default_instance_;
    new (ptr) ::TofWidthMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TofWidthMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TofWidthMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TofWidthMessage_message_2eproto}, {}};

static void InitDefaultsscc_info_TrigClassMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrigClassMessage_default_instance_;
    new (ptr) ::TrigClassMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrigClassMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrigClassMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrigClassMessage_message_2eproto}, {}};

static void InitDefaultsscc_info_TrigSourceMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TrigSourceMessage_default_instance_;
    new (ptr) ::TrigSourceMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TrigSourceMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrigSourceMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_TrigSourceMessage_message_2eproto}, {}};

static void InitDefaultsscc_info_UimfRequestMessage_message_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UimfRequestMessage_default_instance_;
    new (ptr) ::UimfRequestMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UimfRequestMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UimfRequestMessage_message_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsscc_info_UimfRequestMessage_message_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_message_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_message_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_message_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Message, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Message, mz_),
  PROTOBUF_FIELD_OFFSET(::Message, tic_),
  PROTOBUF_FIELD_OFFSET(::Message, time_stamps_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TofWidthMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TofWidthMessage, pusher_pulse_width_),
  PROTOBUF_FIELD_OFFSET(::TofWidthMessage, num_samples_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SetupMessage, horizontal_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, vertical_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, trig_),
  PROTOBUF_FIELD_OFFSET(::SetupMessage, source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrigClassMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrigClassMessage, trig_class_),
  PROTOBUF_FIELD_OFFSET(::TrigClassMessage, source_pattern_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, channel_),
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, trig_coupling_),
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, trig_level_1_),
  PROTOBUF_FIELD_OFFSET(::TrigSourceMessage, trig_level_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, start_trigger_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, nbr_samples_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, frame_length_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, nbr_accumulations_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, frame_number_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, offset_bins_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, file_name_),
  PROTOBUF_FIELD_OFFSET(::UimfRequestMessage, frame_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, horizontal_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, vertical_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, trig_class_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, trig_source_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, mode_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, samples_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, segments_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, post_samples_),
  PROTOBUF_FIELD_OFFSET(::DigitizerSetupMessage, pre_samples_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Message)},
  { 8, -1, sizeof(::TofWidthMessage)},
  { 15, -1, sizeof(::SetupMessage)},
  { 24, -1, sizeof(::TrigClassMessage)},
  { 31, -1, sizeof(::TrigSourceMessage)},
  { 40, -1, sizeof(::UimfRequestMessage)},
  { 53, -1, sizeof(::DigitizerSetupMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Message_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TofWidthMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SetupMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrigClassMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TrigSourceMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UimfRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DigitizerSetupMessage_default_instance_),
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\"7\n\007Message\022\n\n\002mz\030\001 \003(\005\022\013"
  "\n\003tic\030\002 \003(\r\022\023\n\013time_stamps\030\003 \003(\004\"B\n\017TofW"
  "idthMessage\022\032\n\022pusher_pulse_width\030\001 \001(\004\022"
  "\023\n\013num_samples\030\002 \001(\004\"y\n\014SetupMessage\022\022\n\n"
  "horizontal\030\001 \001(\001\022\020\n\010vertical\030\002 \001(\001\022\037\n\004Tr"
  "ig\030\003 \001(\0132\021.TrigClassMessage\022\"\n\006Source\030\004 "
  "\001(\0132\022.TrigSourceMessage\"\236\001\n\020TrigClassMes"
  "sage\022/\n\ntrig_class\030\001 \001(\0162\033.TrigClassMess"
  "age.TrigClass\022\026\n\016source_pattern\030\002 \001(\005\"A\n"
  "\tTrigClass\022\010\n\004Edge\020\000\022\006\n\002Tv\020\001\022\006\n\002Or\020\003\022\007\n\003"
  "Nor\020\004\022\007\n\003And\020\005\022\010\n\004Nand\020\006\"\373\001\n\021TrigSourceM"
  "essage\022\017\n\007channel\030\001 \001(\005\0226\n\rtrig_coupling"
  "\030\002 \001(\0162\037.TrigSourceMessage.TrigCoupling\022"
  "\024\n\014trig_level_1\030\003 \001(\001\022\024\n\014trig_level_2\030\004 "
  "\001(\001\"H\n\014TrigCoupling\022\006\n\002Dc\020\000\022\006\n\002Ac\020\001\022\014\n\010H"
  "fReject\020\002\022\014\n\010Dc50Ohms\020\003\022\014\n\010Ac50Ohms\020\004\"\'\n"
  "\tTrigSlope\022\014\n\010Positive\020\000\022\014\n\010Negative\020\001\"\237"
  "\002\n\022UimfRequestMessage\022\025\n\rstart_trigger\030\001"
  " \001(\004\022\023\n\013nbr_samples\030\002 \001(\004\022\024\n\014frame_lengt"
  "h\030\003 \001(\004\022\031\n\021nbr_accumulations\030\004 \001(\004\022\024\n\014fr"
  "ame_number\030\005 \001(\r\022\023\n\013offset_bins\030\006 \001(\r\022\021\n"
  "\tfile_name\030\007 \001(\t\0221\n\nframe_type\030\010 \001(\0162\035.U"
  "imfRequestMessage.FrameType\";\n\tFrameType"
  "\022\006\n\002MS\020\000\022\010\n\004MSMS\020\001\022\017\n\013Calibration\020\002\022\013\n\007P"
  "rescan\020\003\"\302\001\n\025DigitizerSetupMessage\022\022\n\nho"
  "rizontal\030\001 \001(\001\022\020\n\010vertical\030\002 \001(\001\022\022\n\ntrig"
  "_class\030\003 \001(\001\022\023\n\013trig_source\030\004 \001(\001\022\014\n\004mod"
  "e\030\005 \001(\005\022\017\n\007samples\030\006 \001(\r\022\020\n\010segments\030\007 \001"
  "(\r\022\024\n\014post_samples\030\010 \001(\r\022\023\n\013pre_samples\030"
  "\t \001(\rb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_message_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_message_2eproto_sccs[7] = {
  &scc_info_DigitizerSetupMessage_message_2eproto.base,
  &scc_info_Message_message_2eproto.base,
  &scc_info_SetupMessage_message_2eproto.base,
  &scc_info_TofWidthMessage_message_2eproto.base,
  &scc_info_TrigClassMessage_message_2eproto.base,
  &scc_info_TrigSourceMessage_message_2eproto.base,
  &scc_info_UimfRequestMessage_message_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_message_2eproto_once;
static bool descriptor_table_message_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto = {
  &descriptor_table_message_2eproto_initialized, descriptor_table_protodef_message_2eproto, "message.proto", 1173,
  &descriptor_table_message_2eproto_once, descriptor_table_message_2eproto_sccs, descriptor_table_message_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_message_2eproto::offsets,
  file_level_metadata_message_2eproto, 7, file_level_enum_descriptors_message_2eproto, file_level_service_descriptors_message_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_message_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_message_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigClassMessage_TrigClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool TrigClassMessage_TrigClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrigClassMessage_TrigClass TrigClassMessage::Edge;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Tv;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Or;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Nor;
constexpr TrigClassMessage_TrigClass TrigClassMessage::And;
constexpr TrigClassMessage_TrigClass TrigClassMessage::Nand;
constexpr TrigClassMessage_TrigClass TrigClassMessage::TrigClass_MIN;
constexpr TrigClassMessage_TrigClass TrigClassMessage::TrigClass_MAX;
constexpr int TrigClassMessage::TrigClass_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigSourceMessage_TrigCoupling_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[1];
}
bool TrigSourceMessage_TrigCoupling_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Dc;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Ac;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::HfReject;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Dc50Ohms;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::Ac50Ohms;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::TrigCoupling_MIN;
constexpr TrigSourceMessage_TrigCoupling TrigSourceMessage::TrigCoupling_MAX;
constexpr int TrigSourceMessage::TrigCoupling_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrigSourceMessage_TrigSlope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[2];
}
bool TrigSourceMessage_TrigSlope_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::Positive;
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::Negative;
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::TrigSlope_MIN;
constexpr TrigSourceMessage_TrigSlope TrigSourceMessage::TrigSlope_MAX;
constexpr int TrigSourceMessage::TrigSlope_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UimfRequestMessage_FrameType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[3];
}
bool UimfRequestMessage_FrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr UimfRequestMessage_FrameType UimfRequestMessage::MS;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::MSMS;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::Calibration;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::Prescan;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::FrameType_MIN;
constexpr UimfRequestMessage_FrameType UimfRequestMessage::FrameType_MAX;
constexpr int UimfRequestMessage::FrameType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void Message::InitAsDefaultInstance() {
}
class Message::_Internal {
 public:
};

Message::Message()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Message)
}
Message::Message(const Message& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      mz_(from.mz_),
      tic_(from.tic_),
      time_stamps_(from.time_stamps_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Message)
}

void Message::SharedCtor() {
}

Message::~Message() {
  // @@protoc_insertion_point(destructor:Message)
  SharedDtor();
}

void Message::SharedDtor() {
}

void Message::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Message& Message::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Message_message_2eproto.base);
  return *internal_default_instance();
}


void Message::Clear() {
// @@protoc_insertion_point(message_clear_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mz_.Clear();
  tic_.Clear();
  time_stamps_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* Message::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated int32 mz = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(mutable_mz(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_mz(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 tic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_tic(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_tic(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 time_stamps = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_time_stamps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_time_stamps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool Message::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:Message)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 mz = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mz())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 1, 10u, input, this->mutable_mz())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 tic = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_tic())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_tic())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 time_stamps = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_time_stamps())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_time_stamps())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Message)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Message)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void Message::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 mz = 1;
  if (this->mz_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(1, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_mz_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->mz_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32NoTag(
      this->mz(i), output);
  }

  // repeated uint32 tic = 2;
  if (this->tic_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(2, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_tic_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->tic_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32NoTag(
      this->tic(i), output);
  }

  // repeated uint64 time_stamps = 3;
  if (this->time_stamps_size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTag(3, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_time_stamps_cached_byte_size_.load(
        std::memory_order_relaxed));
  }
  for (int i = 0, n = this->time_stamps_size(); i < n; i++) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64NoTag(
      this->time_stamps(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Message)
}

::PROTOBUF_NAMESPACE_ID::uint8* Message::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Message)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 mz = 1;
  if (this->mz_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      1,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _mz_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->mz_, target);
  }

  // repeated uint32 tic = 2;
  if (this->tic_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      2,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _tic_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->tic_, target);
  }

  // repeated uint64 time_stamps = 3;
  if (this->time_stamps_size() > 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteTagToArray(
      3,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream::WriteVarint32ToArray(
        _time_stamps_cached_byte_size_.load(std::memory_order_relaxed),
         target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      WriteUInt64NoTagToArray(this->time_stamps_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Message)
  return target;
}

size_t Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Message)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 mz = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->mz_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _mz_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 tic = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->tic_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _tic_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 time_stamps = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->time_stamps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _time_stamps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Message::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  const Message* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Message>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Message)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Message)
    MergeFrom(*source);
  }
}

void Message::MergeFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Message)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  mz_.MergeFrom(from.mz_);
  tic_.MergeFrom(from.tic_);
  time_stamps_.MergeFrom(from.time_stamps_);
}

void Message::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Message::CopyFrom(const Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Message::IsInitialized() const {
  return true;
}

void Message::InternalSwap(Message* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  mz_.InternalSwap(&other->mz_);
  tic_.InternalSwap(&other->tic_);
  time_stamps_.InternalSwap(&other->time_stamps_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Message::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TofWidthMessage::InitAsDefaultInstance() {
}
class TofWidthMessage::_Internal {
 public:
};

TofWidthMessage::TofWidthMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TofWidthMessage)
}
TofWidthMessage::TofWidthMessage(const TofWidthMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&pusher_pulse_width_, &from.pusher_pulse_width_,
    static_cast<size_t>(reinterpret_cast<char*>(&num_samples_) -
    reinterpret_cast<char*>(&pusher_pulse_width_)) + sizeof(num_samples_));
  // @@protoc_insertion_point(copy_constructor:TofWidthMessage)
}

void TofWidthMessage::SharedCtor() {
  ::memset(&pusher_pulse_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_samples_) -
      reinterpret_cast<char*>(&pusher_pulse_width_)) + sizeof(num_samples_));
}

TofWidthMessage::~TofWidthMessage() {
  // @@protoc_insertion_point(destructor:TofWidthMessage)
  SharedDtor();
}

void TofWidthMessage::SharedDtor() {
}

void TofWidthMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TofWidthMessage& TofWidthMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TofWidthMessage_message_2eproto.base);
  return *internal_default_instance();
}


void TofWidthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TofWidthMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&pusher_pulse_width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&num_samples_) -
      reinterpret_cast<char*>(&pusher_pulse_width_)) + sizeof(num_samples_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TofWidthMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 pusher_pulse_width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          pusher_pulse_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 num_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          num_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TofWidthMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TofWidthMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 pusher_pulse_width = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pusher_pulse_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 num_samples = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &num_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TofWidthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TofWidthMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TofWidthMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TofWidthMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pusher_pulse_width = 1;
  if (this->pusher_pulse_width() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->pusher_pulse_width(), output);
  }

  // uint64 num_samples = 2;
  if (this->num_samples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->num_samples(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TofWidthMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* TofWidthMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TofWidthMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 pusher_pulse_width = 1;
  if (this->pusher_pulse_width() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->pusher_pulse_width(), target);
  }

  // uint64 num_samples = 2;
  if (this->num_samples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->num_samples(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TofWidthMessage)
  return target;
}

size_t TofWidthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TofWidthMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 pusher_pulse_width = 1;
  if (this->pusher_pulse_width() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->pusher_pulse_width());
  }

  // uint64 num_samples = 2;
  if (this->num_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->num_samples());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TofWidthMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TofWidthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TofWidthMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TofWidthMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TofWidthMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TofWidthMessage)
    MergeFrom(*source);
  }
}

void TofWidthMessage::MergeFrom(const TofWidthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TofWidthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.pusher_pulse_width() != 0) {
    set_pusher_pulse_width(from.pusher_pulse_width());
  }
  if (from.num_samples() != 0) {
    set_num_samples(from.num_samples());
  }
}

void TofWidthMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TofWidthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TofWidthMessage::CopyFrom(const TofWidthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TofWidthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TofWidthMessage::IsInitialized() const {
  return true;
}

void TofWidthMessage::InternalSwap(TofWidthMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(pusher_pulse_width_, other->pusher_pulse_width_);
  swap(num_samples_, other->num_samples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TofWidthMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SetupMessage::InitAsDefaultInstance() {
  ::_SetupMessage_default_instance_._instance.get_mutable()->trig_ = const_cast< ::TrigClassMessage*>(
      ::TrigClassMessage::internal_default_instance());
  ::_SetupMessage_default_instance_._instance.get_mutable()->source_ = const_cast< ::TrigSourceMessage*>(
      ::TrigSourceMessage::internal_default_instance());
}
class SetupMessage::_Internal {
 public:
  static const ::TrigClassMessage& trig(const SetupMessage* msg);
  static const ::TrigSourceMessage& source(const SetupMessage* msg);
};

const ::TrigClassMessage&
SetupMessage::_Internal::trig(const SetupMessage* msg) {
  return *msg->trig_;
}
const ::TrigSourceMessage&
SetupMessage::_Internal::source(const SetupMessage* msg) {
  return *msg->source_;
}
SetupMessage::SetupMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetupMessage)
}
SetupMessage::SetupMessage(const SetupMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_trig()) {
    trig_ = new ::TrigClassMessage(*from.trig_);
  } else {
    trig_ = nullptr;
  }
  if (from.has_source()) {
    source_ = new ::TrigSourceMessage(*from.source_);
  } else {
    source_ = nullptr;
  }
  ::memcpy(&horizontal_, &from.horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&vertical_) -
    reinterpret_cast<char*>(&horizontal_)) + sizeof(vertical_));
  // @@protoc_insertion_point(copy_constructor:SetupMessage)
}

void SetupMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SetupMessage_message_2eproto.base);
  ::memset(&trig_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_) -
      reinterpret_cast<char*>(&trig_)) + sizeof(vertical_));
}

SetupMessage::~SetupMessage() {
  // @@protoc_insertion_point(destructor:SetupMessage)
  SharedDtor();
}

void SetupMessage::SharedDtor() {
  if (this != internal_default_instance()) delete trig_;
  if (this != internal_default_instance()) delete source_;
}

void SetupMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SetupMessage& SetupMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SetupMessage_message_2eproto.base);
  return *internal_default_instance();
}


void SetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && trig_ != nullptr) {
    delete trig_;
  }
  trig_ = nullptr;
  if (GetArenaNoVirtual() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
  ::memset(&horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&vertical_) -
      reinterpret_cast<char*>(&horizontal_)) + sizeof(vertical_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SetupMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double horizontal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vertical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // .TrigClassMessage Trig = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(mutable_trig(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TrigSourceMessage Source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(mutable_source(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SetupMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetupMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double horizontal = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vertical = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TrigClassMessage Trig = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_trig()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TrigSourceMessage Source = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (34 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetupMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetupMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void SetupMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->horizontal() <= 0 && this->horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->horizontal(), output);
  }

  // double vertical = 2;
  if (!(this->vertical() <= 0 && this->vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->vertical(), output);
  }

  // .TrigClassMessage Trig = 3;
  if (this->has_trig()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, _Internal::trig(this), output);
  }

  // .TrigSourceMessage Source = 4;
  if (this->has_source()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, _Internal::source(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetupMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* SetupMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:SetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->horizontal() <= 0 && this->horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->horizontal(), target);
  }

  // double vertical = 2;
  if (!(this->vertical() <= 0 && this->vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->vertical(), target);
  }

  // .TrigClassMessage Trig = 3;
  if (this->has_trig()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, _Internal::trig(this), target);
  }

  // .TrigSourceMessage Source = 4;
  if (this->has_source()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, _Internal::source(this), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetupMessage)
  return target;
}

size_t SetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetupMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TrigClassMessage Trig = 3;
  if (this->has_trig()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *trig_);
  }

  // .TrigSourceMessage Source = 4;
  if (this->has_source()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *source_);
  }

  // double horizontal = 1;
  if (!(this->horizontal() <= 0 && this->horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double vertical = 2;
  if (!(this->vertical() <= 0 && this->vertical() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SetupMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SetupMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SetupMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetupMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetupMessage)
    MergeFrom(*source);
  }
}

void SetupMessage::MergeFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_trig()) {
    mutable_trig()->::TrigClassMessage::MergeFrom(from.trig());
  }
  if (from.has_source()) {
    mutable_source()->::TrigSourceMessage::MergeFrom(from.source());
  }
  if (!(from.horizontal() <= 0 && from.horizontal() >= 0)) {
    set_horizontal(from.horizontal());
  }
  if (!(from.vertical() <= 0 && from.vertical() >= 0)) {
    set_vertical(from.vertical());
  }
}

void SetupMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetupMessage::CopyFrom(const SetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetupMessage::IsInitialized() const {
  return true;
}

void SetupMessage::InternalSwap(SetupMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trig_, other->trig_);
  swap(source_, other->source_);
  swap(horizontal_, other->horizontal_);
  swap(vertical_, other->vertical_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetupMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrigClassMessage::InitAsDefaultInstance() {
}
class TrigClassMessage::_Internal {
 public:
};

TrigClassMessage::TrigClassMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrigClassMessage)
}
TrigClassMessage::TrigClassMessage(const TrigClassMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&trig_class_, &from.trig_class_,
    static_cast<size_t>(reinterpret_cast<char*>(&source_pattern_) -
    reinterpret_cast<char*>(&trig_class_)) + sizeof(source_pattern_));
  // @@protoc_insertion_point(copy_constructor:TrigClassMessage)
}

void TrigClassMessage::SharedCtor() {
  ::memset(&trig_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_pattern_) -
      reinterpret_cast<char*>(&trig_class_)) + sizeof(source_pattern_));
}

TrigClassMessage::~TrigClassMessage() {
  // @@protoc_insertion_point(destructor:TrigClassMessage)
  SharedDtor();
}

void TrigClassMessage::SharedDtor() {
}

void TrigClassMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrigClassMessage& TrigClassMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrigClassMessage_message_2eproto.base);
  return *internal_default_instance();
}


void TrigClassMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TrigClassMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&trig_class_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&source_pattern_) -
      reinterpret_cast<char*>(&trig_class_)) + sizeof(source_pattern_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrigClassMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .TrigClassMessage.TrigClass trig_class = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_trig_class(static_cast<::TrigClassMessage_TrigClass>(val));
        } else goto handle_unusual;
        continue;
      // int32 source_pattern = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          source_pattern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrigClassMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrigClassMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .TrigClassMessage.TrigClass trig_class = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trig_class(static_cast< ::TrigClassMessage_TrigClass >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 source_pattern = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &source_pattern_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrigClassMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrigClassMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrigClassMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrigClassMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrigClassMessage.TrigClass trig_class = 1;
  if (this->trig_class() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      1, this->trig_class(), output);
  }

  // int32 source_pattern = 2;
  if (this->source_pattern() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(2, this->source_pattern(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrigClassMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrigClassMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrigClassMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .TrigClassMessage.TrigClass trig_class = 1;
  if (this->trig_class() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->trig_class(), target);
  }

  // int32 source_pattern = 2;
  if (this->source_pattern() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->source_pattern(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrigClassMessage)
  return target;
}

size_t TrigClassMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrigClassMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .TrigClassMessage.TrigClass trig_class = 1;
  if (this->trig_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trig_class());
  }

  // int32 source_pattern = 2;
  if (this->source_pattern() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->source_pattern());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrigClassMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrigClassMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TrigClassMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrigClassMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrigClassMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrigClassMessage)
    MergeFrom(*source);
  }
}

void TrigClassMessage::MergeFrom(const TrigClassMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrigClassMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.trig_class() != 0) {
    set_trig_class(from.trig_class());
  }
  if (from.source_pattern() != 0) {
    set_source_pattern(from.source_pattern());
  }
}

void TrigClassMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrigClassMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrigClassMessage::CopyFrom(const TrigClassMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrigClassMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrigClassMessage::IsInitialized() const {
  return true;
}

void TrigClassMessage::InternalSwap(TrigClassMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(trig_class_, other->trig_class_);
  swap(source_pattern_, other->source_pattern_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrigClassMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrigSourceMessage::InitAsDefaultInstance() {
}
class TrigSourceMessage::_Internal {
 public:
};

TrigSourceMessage::TrigSourceMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TrigSourceMessage)
}
TrigSourceMessage::TrigSourceMessage(const TrigSourceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&channel_, &from.channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&trig_level_2_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(trig_level_2_));
  // @@protoc_insertion_point(copy_constructor:TrigSourceMessage)
}

void TrigSourceMessage::SharedCtor() {
  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trig_level_2_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(trig_level_2_));
}

TrigSourceMessage::~TrigSourceMessage() {
  // @@protoc_insertion_point(destructor:TrigSourceMessage)
  SharedDtor();
}

void TrigSourceMessage::SharedDtor() {
}

void TrigSourceMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrigSourceMessage& TrigSourceMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrigSourceMessage_message_2eproto.base);
  return *internal_default_instance();
}


void TrigSourceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:TrigSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trig_level_2_) -
      reinterpret_cast<char*>(&channel_)) + sizeof(trig_level_2_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* TrigSourceMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 channel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          channel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_trig_coupling(static_cast<::TrigSourceMessage_TrigCoupling>(val));
        } else goto handle_unusual;
        continue;
      // double trig_level_1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          trig_level_1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double trig_level_2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          trig_level_2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool TrigSourceMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:TrigSourceMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 channel = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &channel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_trig_coupling(static_cast< ::TrigSourceMessage_TrigCoupling >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trig_level_1 = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trig_level_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trig_level_2 = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trig_level_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:TrigSourceMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:TrigSourceMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void TrigSourceMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:TrigSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(1, this->channel(), output);
  }

  // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
  if (this->trig_coupling() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      2, this->trig_coupling(), output);
  }

  // double trig_level_1 = 3;
  if (!(this->trig_level_1() <= 0 && this->trig_level_1() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->trig_level_1(), output);
  }

  // double trig_level_2 = 4;
  if (!(this->trig_level_2() <= 0 && this->trig_level_2() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->trig_level_2(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:TrigSourceMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* TrigSourceMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:TrigSourceMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->channel(), target);
  }

  // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
  if (this->trig_coupling() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->trig_coupling(), target);
  }

  // double trig_level_1 = 3;
  if (!(this->trig_level_1() <= 0 && this->trig_level_1() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->trig_level_1(), target);
  }

  // double trig_level_2 = 4;
  if (!(this->trig_level_2() <= 0 && this->trig_level_2() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->trig_level_2(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TrigSourceMessage)
  return target;
}

size_t TrigSourceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TrigSourceMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 channel = 1;
  if (this->channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->channel());
  }

  // .TrigSourceMessage.TrigCoupling trig_coupling = 2;
  if (this->trig_coupling() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->trig_coupling());
  }

  // double trig_level_1 = 3;
  if (!(this->trig_level_1() <= 0 && this->trig_level_1() >= 0)) {
    total_size += 1 + 8;
  }

  // double trig_level_2 = 4;
  if (!(this->trig_level_2() <= 0 && this->trig_level_2() >= 0)) {
    total_size += 1 + 8;
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrigSourceMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TrigSourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const TrigSourceMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrigSourceMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TrigSourceMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TrigSourceMessage)
    MergeFrom(*source);
  }
}

void TrigSourceMessage::MergeFrom(const TrigSourceMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TrigSourceMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.channel() != 0) {
    set_channel(from.channel());
  }
  if (from.trig_coupling() != 0) {
    set_trig_coupling(from.trig_coupling());
  }
  if (!(from.trig_level_1() <= 0 && from.trig_level_1() >= 0)) {
    set_trig_level_1(from.trig_level_1());
  }
  if (!(from.trig_level_2() <= 0 && from.trig_level_2() >= 0)) {
    set_trig_level_2(from.trig_level_2());
  }
}

void TrigSourceMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TrigSourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrigSourceMessage::CopyFrom(const TrigSourceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TrigSourceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrigSourceMessage::IsInitialized() const {
  return true;
}

void TrigSourceMessage::InternalSwap(TrigSourceMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
  swap(trig_coupling_, other->trig_coupling_);
  swap(trig_level_1_, other->trig_level_1_);
  swap(trig_level_2_, other->trig_level_2_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TrigSourceMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UimfRequestMessage::InitAsDefaultInstance() {
}
class UimfRequestMessage::_Internal {
 public:
};

UimfRequestMessage::UimfRequestMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UimfRequestMessage)
}
UimfRequestMessage::UimfRequestMessage(const UimfRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from.file_name().empty()) {
    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  ::memcpy(&start_trigger_, &from.start_trigger_,
    static_cast<size_t>(reinterpret_cast<char*>(&frame_type_) -
    reinterpret_cast<char*>(&start_trigger_)) + sizeof(frame_type_));
  // @@protoc_insertion_point(copy_constructor:UimfRequestMessage)
}

void UimfRequestMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UimfRequestMessage_message_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type_) -
      reinterpret_cast<char*>(&start_trigger_)) + sizeof(frame_type_));
}

UimfRequestMessage::~UimfRequestMessage() {
  // @@protoc_insertion_point(destructor:UimfRequestMessage)
  SharedDtor();
}

void UimfRequestMessage::SharedDtor() {
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UimfRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UimfRequestMessage& UimfRequestMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UimfRequestMessage_message_2eproto.base);
  return *internal_default_instance();
}


void UimfRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:UimfRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&start_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&frame_type_) -
      reinterpret_cast<char*>(&start_trigger_)) + sizeof(frame_type_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* UimfRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 start_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          start_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nbr_samples = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          nbr_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 frame_length = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          frame_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 nbr_accumulations = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          nbr_accumulations_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 frame_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          frame_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 offset_bins = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          offset_bins_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(mutable_file_name(), ptr, ctx, "UimfRequestMessage.file_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .UimfRequestMessage.FrameType frame_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_frame_type(static_cast<::UimfRequestMessage_FrameType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool UimfRequestMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:UimfRequestMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 start_trigger = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &start_trigger_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nbr_samples = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nbr_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 frame_length = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &frame_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 nbr_accumulations = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (32 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &nbr_accumulations_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 frame_number = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &frame_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 offset_bins = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_bins_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_name = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (58 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->mutable_file_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->file_name().data(), static_cast<int>(this->file_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "UimfRequestMessage.file_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .UimfRequestMessage.FrameType frame_type = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_frame_type(static_cast< ::UimfRequestMessage_FrameType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UimfRequestMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UimfRequestMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void UimfRequestMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UimfRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_trigger = 1;
  if (this->start_trigger() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(1, this->start_trigger(), output);
  }

  // uint64 nbr_samples = 2;
  if (this->nbr_samples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(2, this->nbr_samples(), output);
  }

  // uint64 frame_length = 3;
  if (this->frame_length() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(3, this->frame_length(), output);
  }

  // uint64 nbr_accumulations = 4;
  if (this->nbr_accumulations() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64(4, this->nbr_accumulations(), output);
  }

  // uint32 frame_number = 5;
  if (this->frame_number() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(5, this->frame_number(), output);
  }

  // uint32 offset_bins = 6;
  if (this->offset_bins() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->offset_bins(), output);
  }

  // string file_name = 7;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UimfRequestMessage.file_name");
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->file_name(), output);
  }

  // .UimfRequestMessage.FrameType frame_type = 8;
  if (this->frame_type() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnum(
      8, this->frame_type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:UimfRequestMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* UimfRequestMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:UimfRequestMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 start_trigger = 1;
  if (this->start_trigger() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->start_trigger(), target);
  }

  // uint64 nbr_samples = 2;
  if (this->nbr_samples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->nbr_samples(), target);
  }

  // uint64 frame_length = 3;
  if (this->frame_length() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->frame_length(), target);
  }

  // uint64 nbr_accumulations = 4;
  if (this->nbr_accumulations() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->nbr_accumulations(), target);
  }

  // uint32 frame_number = 5;
  if (this->frame_number() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->frame_number(), target);
  }

  // uint32 offset_bins = 6;
  if (this->offset_bins() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->offset_bins(), target);
  }

  // string file_name = 7;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->file_name().data(), static_cast<int>(this->file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UimfRequestMessage.file_name");
    target =
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteStringToArray(
        7, this->file_name(), target);
  }

  // .UimfRequestMessage.FrameType frame_type = 8;
  if (this->frame_type() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->frame_type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UimfRequestMessage)
  return target;
}

size_t UimfRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UimfRequestMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 7;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->file_name());
  }

  // uint64 start_trigger = 1;
  if (this->start_trigger() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->start_trigger());
  }

  // uint64 nbr_samples = 2;
  if (this->nbr_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nbr_samples());
  }

  // uint64 frame_length = 3;
  if (this->frame_length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->frame_length());
  }

  // uint64 nbr_accumulations = 4;
  if (this->nbr_accumulations() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->nbr_accumulations());
  }

  // uint32 frame_number = 5;
  if (this->frame_number() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->frame_number());
  }

  // uint32 offset_bins = 6;
  if (this->offset_bins() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->offset_bins());
  }

  // .UimfRequestMessage.FrameType frame_type = 8;
  if (this->frame_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->frame_type());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UimfRequestMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UimfRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const UimfRequestMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UimfRequestMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UimfRequestMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UimfRequestMessage)
    MergeFrom(*source);
  }
}

void UimfRequestMessage::MergeFrom(const UimfRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UimfRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {

    file_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.file_name_);
  }
  if (from.start_trigger() != 0) {
    set_start_trigger(from.start_trigger());
  }
  if (from.nbr_samples() != 0) {
    set_nbr_samples(from.nbr_samples());
  }
  if (from.frame_length() != 0) {
    set_frame_length(from.frame_length());
  }
  if (from.nbr_accumulations() != 0) {
    set_nbr_accumulations(from.nbr_accumulations());
  }
  if (from.frame_number() != 0) {
    set_frame_number(from.frame_number());
  }
  if (from.offset_bins() != 0) {
    set_offset_bins(from.offset_bins());
  }
  if (from.frame_type() != 0) {
    set_frame_type(from.frame_type());
  }
}

void UimfRequestMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UimfRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UimfRequestMessage::CopyFrom(const UimfRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UimfRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UimfRequestMessage::IsInitialized() const {
  return true;
}

void UimfRequestMessage::InternalSwap(UimfRequestMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(start_trigger_, other->start_trigger_);
  swap(nbr_samples_, other->nbr_samples_);
  swap(frame_length_, other->frame_length_);
  swap(nbr_accumulations_, other->nbr_accumulations_);
  swap(frame_number_, other->frame_number_);
  swap(offset_bins_, other->offset_bins_);
  swap(frame_type_, other->frame_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UimfRequestMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DigitizerSetupMessage::InitAsDefaultInstance() {
}
class DigitizerSetupMessage::_Internal {
 public:
};

DigitizerSetupMessage::DigitizerSetupMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DigitizerSetupMessage)
}
DigitizerSetupMessage::DigitizerSetupMessage(const DigitizerSetupMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&horizontal_, &from.horizontal_,
    static_cast<size_t>(reinterpret_cast<char*>(&pre_samples_) -
    reinterpret_cast<char*>(&horizontal_)) + sizeof(pre_samples_));
  // @@protoc_insertion_point(copy_constructor:DigitizerSetupMessage)
}

void DigitizerSetupMessage::SharedCtor() {
  ::memset(&horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_samples_) -
      reinterpret_cast<char*>(&horizontal_)) + sizeof(pre_samples_));
}

DigitizerSetupMessage::~DigitizerSetupMessage() {
  // @@protoc_insertion_point(destructor:DigitizerSetupMessage)
  SharedDtor();
}

void DigitizerSetupMessage::SharedDtor() {
}

void DigitizerSetupMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DigitizerSetupMessage& DigitizerSetupMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DigitizerSetupMessage_message_2eproto.base);
  return *internal_default_instance();
}


void DigitizerSetupMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:DigitizerSetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&horizontal_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pre_samples_) -
      reinterpret_cast<char*>(&horizontal_)) + sizeof(pre_samples_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* DigitizerSetupMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // double horizontal = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          horizontal_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double vertical = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          vertical_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double trig_class = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          trig_class_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double trig_source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          trig_source_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // int32 mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 samples = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 segments = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          segments_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 post_samples = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          post_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 pre_samples = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          pre_samples_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool DigitizerSetupMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:DigitizerSetupMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // double horizontal = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (9 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &horizontal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double vertical = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (17 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vertical_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trig_class = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (25 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trig_class_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // double trig_source = 4;
      case 4: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (33 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   double, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &trig_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 mode = 5;
      case 5: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (40 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32>(
                 input, &mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 samples = 6;
      case 6: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (48 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 segments = 7;
      case 7: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (56 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &segments_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 post_samples = 8;
      case 8: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (64 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &post_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 pre_samples = 9;
      case 9: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (72 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pre_samples_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DigitizerSetupMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DigitizerSetupMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void DigitizerSetupMessage::SerializeWithCachedSizes(
    ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DigitizerSetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->horizontal() <= 0 && this->horizontal() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(1, this->horizontal(), output);
  }

  // double vertical = 2;
  if (!(this->vertical() <= 0 && this->vertical() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(2, this->vertical(), output);
  }

  // double trig_class = 3;
  if (!(this->trig_class() <= 0 && this->trig_class() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(3, this->trig_class(), output);
  }

  // double trig_source = 4;
  if (!(this->trig_source() <= 0 && this->trig_source() >= 0)) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDouble(4, this->trig_source(), output);
  }

  // int32 mode = 5;
  if (this->mode() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32(5, this->mode(), output);
  }

  // uint32 samples = 6;
  if (this->samples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(6, this->samples(), output);
  }

  // uint32 segments = 7;
  if (this->segments() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(7, this->segments(), output);
  }

  // uint32 post_samples = 8;
  if (this->post_samples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(8, this->post_samples(), output);
  }

  // uint32 pre_samples = 9;
  if (this->pre_samples() != 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32(9, this->pre_samples(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DigitizerSetupMessage)
}

::PROTOBUF_NAMESPACE_ID::uint8* DigitizerSetupMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:DigitizerSetupMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->horizontal() <= 0 && this->horizontal() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->horizontal(), target);
  }

  // double vertical = 2;
  if (!(this->vertical() <= 0 && this->vertical() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->vertical(), target);
  }

  // double trig_class = 3;
  if (!(this->trig_class() <= 0 && this->trig_class() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->trig_class(), target);
  }

  // double trig_source = 4;
  if (!(this->trig_source() <= 0 && this->trig_source() >= 0)) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->trig_source(), target);
  }

  // int32 mode = 5;
  if (this->mode() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->mode(), target);
  }

  // uint32 samples = 6;
  if (this->samples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->samples(), target);
  }

  // uint32 segments = 7;
  if (this->segments() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->segments(), target);
  }

  // uint32 post_samples = 8;
  if (this->post_samples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->post_samples(), target);
  }

  // uint32 pre_samples = 9;
  if (this->pre_samples() != 0) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->pre_samples(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DigitizerSetupMessage)
  return target;
}

size_t DigitizerSetupMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DigitizerSetupMessage)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double horizontal = 1;
  if (!(this->horizontal() <= 0 && this->horizontal() >= 0)) {
    total_size += 1 + 8;
  }

  // double vertical = 2;
  if (!(this->vertical() <= 0 && this->vertical() >= 0)) {
    total_size += 1 + 8;
  }

  // double trig_class = 3;
  if (!(this->trig_class() <= 0 && this->trig_class() >= 0)) {
    total_size += 1 + 8;
  }

  // double trig_source = 4;
  if (!(this->trig_source() <= 0 && this->trig_source() >= 0)) {
    total_size += 1 + 8;
  }

  // int32 mode = 5;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->mode());
  }

  // uint32 samples = 6;
  if (this->samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->samples());
  }

  // uint32 segments = 7;
  if (this->segments() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->segments());
  }

  // uint32 post_samples = 8;
  if (this->post_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->post_samples());
  }

  // uint32 pre_samples = 9;
  if (this->pre_samples() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->pre_samples());
  }

  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DigitizerSetupMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DigitizerSetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const DigitizerSetupMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DigitizerSetupMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DigitizerSetupMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DigitizerSetupMessage)
    MergeFrom(*source);
  }
}

void DigitizerSetupMessage::MergeFrom(const DigitizerSetupMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DigitizerSetupMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.horizontal() <= 0 && from.horizontal() >= 0)) {
    set_horizontal(from.horizontal());
  }
  if (!(from.vertical() <= 0 && from.vertical() >= 0)) {
    set_vertical(from.vertical());
  }
  if (!(from.trig_class() <= 0 && from.trig_class() >= 0)) {
    set_trig_class(from.trig_class());
  }
  if (!(from.trig_source() <= 0 && from.trig_source() >= 0)) {
    set_trig_source(from.trig_source());
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
  if (from.samples() != 0) {
    set_samples(from.samples());
  }
  if (from.segments() != 0) {
    set_segments(from.segments());
  }
  if (from.post_samples() != 0) {
    set_post_samples(from.post_samples());
  }
  if (from.pre_samples() != 0) {
    set_pre_samples(from.pre_samples());
  }
}

void DigitizerSetupMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DigitizerSetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DigitizerSetupMessage::CopyFrom(const DigitizerSetupMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DigitizerSetupMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitizerSetupMessage::IsInitialized() const {
  return true;
}

void DigitizerSetupMessage::InternalSwap(DigitizerSetupMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(horizontal_, other->horizontal_);
  swap(vertical_, other->vertical_);
  swap(trig_class_, other->trig_class_);
  swap(trig_source_, other->trig_source_);
  swap(mode_, other->mode_);
  swap(samples_, other->samples_);
  swap(segments_, other->segments_);
  swap(post_samples_, other->post_samples_);
  swap(pre_samples_, other->pre_samples_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitizerSetupMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Message* Arena::CreateMaybeMessage< ::Message >(Arena* arena) {
  return Arena::CreateInternal< ::Message >(arena);
}
template<> PROTOBUF_NOINLINE ::TofWidthMessage* Arena::CreateMaybeMessage< ::TofWidthMessage >(Arena* arena) {
  return Arena::CreateInternal< ::TofWidthMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::SetupMessage* Arena::CreateMaybeMessage< ::SetupMessage >(Arena* arena) {
  return Arena::CreateInternal< ::SetupMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TrigClassMessage* Arena::CreateMaybeMessage< ::TrigClassMessage >(Arena* arena) {
  return Arena::CreateInternal< ::TrigClassMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::TrigSourceMessage* Arena::CreateMaybeMessage< ::TrigSourceMessage >(Arena* arena) {
  return Arena::CreateInternal< ::TrigSourceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::UimfRequestMessage* Arena::CreateMaybeMessage< ::UimfRequestMessage >(Arena* arena) {
  return Arena::CreateInternal< ::UimfRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::DigitizerSetupMessage* Arena::CreateMaybeMessage< ::DigitizerSetupMessage >(Arena* arena) {
  return Arena::CreateInternal< ::DigitizerSetupMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
