// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from message.proto</summary>
public static partial class MessageReflection {

  #region Descriptor
  /// <summary>File descriptor for message.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static MessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg1tZXNzYWdlLnByb3RvIjcKB01lc3NhZ2USCgoCbXoYASADKAUSCwoDdGlj",
          "GAIgAygNEhMKC3RpbWVfc3RhbXBzGAMgAygEIkIKD1RvZldpZHRoTWVzc2Fn",
          "ZRIaChJwdXNoZXJfcHVsc2Vfd2lkdGgYASABKAQSEwoLbnVtX3NhbXBsZXMY",
          "AiABKAQieQoMU2V0dXBNZXNzYWdlEhIKCmhvcml6b250YWwYASABKAESEAoI",
          "dmVydGljYWwYAiABKAESHwoEVHJpZxgDIAEoCzIRLlRyaWdDbGFzc01lc3Nh",
          "Z2USIgoGU291cmNlGAQgASgLMhIuVHJpZ1NvdXJjZU1lc3NhZ2UingEKEFRy",
          "aWdDbGFzc01lc3NhZ2USLwoKdHJpZ19jbGFzcxgBIAEoDjIbLlRyaWdDbGFz",
          "c01lc3NhZ2UuVHJpZ0NsYXNzEhYKDnNvdXJjZV9wYXR0ZXJuGAIgASgFIkEK",
          "CVRyaWdDbGFzcxIICgRFZGdlEAASBgoCVHYQARIGCgJPchADEgcKA05vchAE",
          "EgcKA0FuZBAFEggKBE5hbmQQBiL7AQoRVHJpZ1NvdXJjZU1lc3NhZ2USDwoH",
          "Y2hhbm5lbBgBIAEoBRI2Cg10cmlnX2NvdXBsaW5nGAIgASgOMh8uVHJpZ1Nv",
          "dXJjZU1lc3NhZ2UuVHJpZ0NvdXBsaW5nEhQKDHRyaWdfbGV2ZWxfMRgDIAEo",
          "ARIUCgx0cmlnX2xldmVsXzIYBCABKAEiSAoMVHJpZ0NvdXBsaW5nEgYKAkRj",
          "EAASBgoCQWMQARIMCghIZlJlamVjdBACEgwKCERjNTBPaG1zEAMSDAoIQWM1",
          "ME9obXMQBCInCglUcmlnU2xvcGUSDAoIUG9zaXRpdmUQABIMCghOZWdhdGl2",
          "ZRABIp8CChJVaW1mUmVxdWVzdE1lc3NhZ2USFQoNc3RhcnRfdHJpZ2dlchgB",
          "IAEoBBITCgtuYnJfc2FtcGxlcxgCIAEoBBIUCgxmcmFtZV9sZW5ndGgYAyAB",
          "KAQSGQoRbmJyX2FjY3VtdWxhdGlvbnMYBCABKAQSFAoMZnJhbWVfbnVtYmVy",
          "GAUgASgNEhMKC29mZnNldF9iaW5zGAYgASgNEhEKCWZpbGVfbmFtZRgHIAEo",
          "CRIxCgpmcmFtZV90eXBlGAggASgOMh0uVWltZlJlcXVlc3RNZXNzYWdlLkZy",
          "YW1lVHlwZSI7CglGcmFtZVR5cGUSBgoCTVMQABIICgRNU01TEAESDwoLQ2Fs",
          "aWJyYXRpb24QAhILCgdQcmVzY2FuEAMiwgEKFURpZ2l0aXplclNldHVwTWVz",
          "c2FnZRISCgpob3Jpem9udGFsGAEgASgBEhAKCHZlcnRpY2FsGAIgASgBEhIK",
          "CnRyaWdfY2xhc3MYAyABKAESEwoLdHJpZ19zb3VyY2UYBCABKAESDAoEbW9k",
          "ZRgFIAEoBRIPCgdzYW1wbGVzGAYgASgNEhAKCHNlZ21lbnRzGAcgASgNEhQK",
          "DHBvc3Rfc2FtcGxlcxgIIAEoDRITCgtwcmVfc2FtcGxlcxgJIAEoDWIGcHJv",
          "dG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::Message), global::Message.Parser, new[]{ "Mz", "Tic", "TimeStamps" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TofWidthMessage), global::TofWidthMessage.Parser, new[]{ "PusherPulseWidth", "NumSamples" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetupMessage), global::SetupMessage.Parser, new[]{ "Horizontal", "Vertical", "Trig", "Source" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TrigClassMessage), global::TrigClassMessage.Parser, new[]{ "TrigClass", "SourcePattern" }, null, new[]{ typeof(global::TrigClassMessage.Types.TrigClass) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::TrigSourceMessage), global::TrigSourceMessage.Parser, new[]{ "Channel", "TrigCoupling", "TrigLevel1", "TrigLevel2" }, null, new[]{ typeof(global::TrigSourceMessage.Types.TrigCoupling), typeof(global::TrigSourceMessage.Types.TrigSlope) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UimfRequestMessage), global::UimfRequestMessage.Parser, new[]{ "StartTrigger", "NbrSamples", "FrameLength", "NbrAccumulations", "FrameNumber", "OffsetBins", "FileName", "FrameType" }, null, new[]{ typeof(global::UimfRequestMessage.Types.FrameType) }, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DigitizerSetupMessage), global::DigitizerSetupMessage.Parser, new[]{ "Horizontal", "Vertical", "TrigClass", "TrigSource", "Mode", "Samples", "Segments", "PostSamples", "PreSamples" }, null, null, null)
        }));
  }
  #endregion

}
#region Messages
public sealed partial class Message : pb::IMessage<Message> {
  private static readonly pb::MessageParser<Message> _parser = new pb::MessageParser<Message>(() => new Message());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Message> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message(Message other) : this() {
    mz_ = other.mz_.Clone();
    tic_ = other.tic_.Clone();
    timeStamps_ = other.timeStamps_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Message Clone() {
    return new Message(this);
  }

  /// <summary>Field number for the "mz" field.</summary>
  public const int MzFieldNumber = 1;
  private static readonly pb::FieldCodec<int> _repeated_mz_codec
      = pb::FieldCodec.ForInt32(10);
  private readonly pbc::RepeatedField<int> mz_ = new pbc::RepeatedField<int>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> Mz {
    get { return mz_; }
  }

  /// <summary>Field number for the "tic" field.</summary>
  public const int TicFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_tic_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> tic_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Tic {
    get { return tic_; }
  }

  /// <summary>Field number for the "time_stamps" field.</summary>
  public const int TimeStampsFieldNumber = 3;
  private static readonly pb::FieldCodec<ulong> _repeated_timeStamps_codec
      = pb::FieldCodec.ForUInt64(26);
  private readonly pbc::RepeatedField<ulong> timeStamps_ = new pbc::RepeatedField<ulong>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<ulong> TimeStamps {
    get { return timeStamps_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Message);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Message other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!mz_.Equals(other.mz_)) return false;
    if(!tic_.Equals(other.tic_)) return false;
    if(!timeStamps_.Equals(other.timeStamps_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= mz_.GetHashCode();
    hash ^= tic_.GetHashCode();
    hash ^= timeStamps_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    mz_.WriteTo(output, _repeated_mz_codec);
    tic_.WriteTo(output, _repeated_tic_codec);
    timeStamps_.WriteTo(output, _repeated_timeStamps_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += mz_.CalculateSize(_repeated_mz_codec);
    size += tic_.CalculateSize(_repeated_tic_codec);
    size += timeStamps_.CalculateSize(_repeated_timeStamps_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Message other) {
    if (other == null) {
      return;
    }
    mz_.Add(other.mz_);
    tic_.Add(other.tic_);
    timeStamps_.Add(other.timeStamps_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10:
        case 8: {
          mz_.AddEntriesFrom(input, _repeated_mz_codec);
          break;
        }
        case 18:
        case 16: {
          tic_.AddEntriesFrom(input, _repeated_tic_codec);
          break;
        }
        case 26:
        case 24: {
          timeStamps_.AddEntriesFrom(input, _repeated_timeStamps_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class TofWidthMessage : pb::IMessage<TofWidthMessage> {
  private static readonly pb::MessageParser<TofWidthMessage> _parser = new pb::MessageParser<TofWidthMessage>(() => new TofWidthMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TofWidthMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TofWidthMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TofWidthMessage(TofWidthMessage other) : this() {
    pusherPulseWidth_ = other.pusherPulseWidth_;
    numSamples_ = other.numSamples_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TofWidthMessage Clone() {
    return new TofWidthMessage(this);
  }

  /// <summary>Field number for the "pusher_pulse_width" field.</summary>
  public const int PusherPulseWidthFieldNumber = 1;
  private ulong pusherPulseWidth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong PusherPulseWidth {
    get { return pusherPulseWidth_; }
    set {
      pusherPulseWidth_ = value;
    }
  }

  /// <summary>Field number for the "num_samples" field.</summary>
  public const int NumSamplesFieldNumber = 2;
  private ulong numSamples_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong NumSamples {
    get { return numSamples_; }
    set {
      numSamples_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TofWidthMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TofWidthMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PusherPulseWidth != other.PusherPulseWidth) return false;
    if (NumSamples != other.NumSamples) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PusherPulseWidth != 0UL) hash ^= PusherPulseWidth.GetHashCode();
    if (NumSamples != 0UL) hash ^= NumSamples.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PusherPulseWidth != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(PusherPulseWidth);
    }
    if (NumSamples != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(NumSamples);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PusherPulseWidth != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(PusherPulseWidth);
    }
    if (NumSamples != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NumSamples);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TofWidthMessage other) {
    if (other == null) {
      return;
    }
    if (other.PusherPulseWidth != 0UL) {
      PusherPulseWidth = other.PusherPulseWidth;
    }
    if (other.NumSamples != 0UL) {
      NumSamples = other.NumSamples;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          PusherPulseWidth = input.ReadUInt64();
          break;
        }
        case 16: {
          NumSamples = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

public sealed partial class SetupMessage : pb::IMessage<SetupMessage> {
  private static readonly pb::MessageParser<SetupMessage> _parser = new pb::MessageParser<SetupMessage>(() => new SetupMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetupMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetupMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetupMessage(SetupMessage other) : this() {
    horizontal_ = other.horizontal_;
    vertical_ = other.vertical_;
    Trig = other.trig_ != null ? other.Trig.Clone() : null;
    Source = other.source_ != null ? other.Source.Clone() : null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetupMessage Clone() {
    return new SetupMessage(this);
  }

  /// <summary>Field number for the "horizontal" field.</summary>
  public const int HorizontalFieldNumber = 1;
  private double horizontal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Horizontal {
    get { return horizontal_; }
    set {
      horizontal_ = value;
    }
  }

  /// <summary>Field number for the "vertical" field.</summary>
  public const int VerticalFieldNumber = 2;
  private double vertical_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Vertical {
    get { return vertical_; }
    set {
      vertical_ = value;
    }
  }

  /// <summary>Field number for the "Trig" field.</summary>
  public const int TrigFieldNumber = 3;
  private global::TrigClassMessage trig_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrigClassMessage Trig {
    get { return trig_; }
    set {
      trig_ = value;
    }
  }

  /// <summary>Field number for the "Source" field.</summary>
  public const int SourceFieldNumber = 4;
  private global::TrigSourceMessage source_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrigSourceMessage Source {
    get { return source_; }
    set {
      source_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetupMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetupMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Horizontal != other.Horizontal) return false;
    if (Vertical != other.Vertical) return false;
    if (!object.Equals(Trig, other.Trig)) return false;
    if (!object.Equals(Source, other.Source)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Horizontal != 0D) hash ^= Horizontal.GetHashCode();
    if (Vertical != 0D) hash ^= Vertical.GetHashCode();
    if (trig_ != null) hash ^= Trig.GetHashCode();
    if (source_ != null) hash ^= Source.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Horizontal != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Horizontal);
    }
    if (Vertical != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Vertical);
    }
    if (trig_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Trig);
    }
    if (source_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Source);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Horizontal != 0D) {
      size += 1 + 8;
    }
    if (Vertical != 0D) {
      size += 1 + 8;
    }
    if (trig_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trig);
    }
    if (source_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetupMessage other) {
    if (other == null) {
      return;
    }
    if (other.Horizontal != 0D) {
      Horizontal = other.Horizontal;
    }
    if (other.Vertical != 0D) {
      Vertical = other.Vertical;
    }
    if (other.trig_ != null) {
      if (trig_ == null) {
        trig_ = new global::TrigClassMessage();
      }
      Trig.MergeFrom(other.Trig);
    }
    if (other.source_ != null) {
      if (source_ == null) {
        source_ = new global::TrigSourceMessage();
      }
      Source.MergeFrom(other.Source);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          Horizontal = input.ReadDouble();
          break;
        }
        case 17: {
          Vertical = input.ReadDouble();
          break;
        }
        case 26: {
          if (trig_ == null) {
            trig_ = new global::TrigClassMessage();
          }
          input.ReadMessage(trig_);
          break;
        }
        case 34: {
          if (source_ == null) {
            source_ = new global::TrigSourceMessage();
          }
          input.ReadMessage(source_);
          break;
        }
      }
    }
  }

}

public sealed partial class TrigClassMessage : pb::IMessage<TrigClassMessage> {
  private static readonly pb::MessageParser<TrigClassMessage> _parser = new pb::MessageParser<TrigClassMessage>(() => new TrigClassMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TrigClassMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrigClassMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrigClassMessage(TrigClassMessage other) : this() {
    trigClass_ = other.trigClass_;
    sourcePattern_ = other.sourcePattern_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrigClassMessage Clone() {
    return new TrigClassMessage(this);
  }

  /// <summary>Field number for the "trig_class" field.</summary>
  public const int TrigClassFieldNumber = 1;
  private global::TrigClassMessage.Types.TrigClass trigClass_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrigClassMessage.Types.TrigClass TrigClass {
    get { return trigClass_; }
    set {
      trigClass_ = value;
    }
  }

  /// <summary>Field number for the "source_pattern" field.</summary>
  public const int SourcePatternFieldNumber = 2;
  private int sourcePattern_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SourcePattern {
    get { return sourcePattern_; }
    set {
      sourcePattern_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TrigClassMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TrigClassMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TrigClass != other.TrigClass) return false;
    if (SourcePattern != other.SourcePattern) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TrigClass != 0) hash ^= TrigClass.GetHashCode();
    if (SourcePattern != 0) hash ^= SourcePattern.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TrigClass != 0) {
      output.WriteRawTag(8);
      output.WriteEnum((int) TrigClass);
    }
    if (SourcePattern != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(SourcePattern);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TrigClass != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrigClass);
    }
    if (SourcePattern != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourcePattern);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TrigClassMessage other) {
    if (other == null) {
      return;
    }
    if (other.TrigClass != 0) {
      TrigClass = other.TrigClass;
    }
    if (other.SourcePattern != 0) {
      SourcePattern = other.SourcePattern;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          trigClass_ = (global::TrigClassMessage.Types.TrigClass) input.ReadEnum();
          break;
        }
        case 16: {
          SourcePattern = input.ReadInt32();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the TrigClassMessage message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TrigClass {
      [pbr::OriginalName("Edge")] Edge = 0,
      [pbr::OriginalName("Tv")] Tv = 1,
      [pbr::OriginalName("Or")] Or = 3,
      [pbr::OriginalName("Nor")] Nor = 4,
      [pbr::OriginalName("And")] And = 5,
      [pbr::OriginalName("Nand")] Nand = 6,
    }

  }
  #endregion

}

public sealed partial class TrigSourceMessage : pb::IMessage<TrigSourceMessage> {
  private static readonly pb::MessageParser<TrigSourceMessage> _parser = new pb::MessageParser<TrigSourceMessage>(() => new TrigSourceMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<TrigSourceMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrigSourceMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrigSourceMessage(TrigSourceMessage other) : this() {
    channel_ = other.channel_;
    trigCoupling_ = other.trigCoupling_;
    trigLevel1_ = other.trigLevel1_;
    trigLevel2_ = other.trigLevel2_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public TrigSourceMessage Clone() {
    return new TrigSourceMessage(this);
  }

  /// <summary>Field number for the "channel" field.</summary>
  public const int ChannelFieldNumber = 1;
  private int channel_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  /// <summary>Field number for the "trig_coupling" field.</summary>
  public const int TrigCouplingFieldNumber = 2;
  private global::TrigSourceMessage.Types.TrigCoupling trigCoupling_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TrigSourceMessage.Types.TrigCoupling TrigCoupling {
    get { return trigCoupling_; }
    set {
      trigCoupling_ = value;
    }
  }

  /// <summary>Field number for the "trig_level_1" field.</summary>
  public const int TrigLevel1FieldNumber = 3;
  private double trigLevel1_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TrigLevel1 {
    get { return trigLevel1_; }
    set {
      trigLevel1_ = value;
    }
  }

  /// <summary>Field number for the "trig_level_2" field.</summary>
  public const int TrigLevel2FieldNumber = 4;
  private double trigLevel2_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TrigLevel2 {
    get { return trigLevel2_; }
    set {
      trigLevel2_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as TrigSourceMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(TrigSourceMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Channel != other.Channel) return false;
    if (TrigCoupling != other.TrigCoupling) return false;
    if (TrigLevel1 != other.TrigLevel1) return false;
    if (TrigLevel2 != other.TrigLevel2) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (TrigCoupling != 0) hash ^= TrigCoupling.GetHashCode();
    if (TrigLevel1 != 0D) hash ^= TrigLevel1.GetHashCode();
    if (TrigLevel2 != 0D) hash ^= TrigLevel2.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Channel != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Channel);
    }
    if (TrigCoupling != 0) {
      output.WriteRawTag(16);
      output.WriteEnum((int) TrigCoupling);
    }
    if (TrigLevel1 != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(TrigLevel1);
    }
    if (TrigLevel2 != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(TrigLevel2);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
    }
    if (TrigCoupling != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TrigCoupling);
    }
    if (TrigLevel1 != 0D) {
      size += 1 + 8;
    }
    if (TrigLevel2 != 0D) {
      size += 1 + 8;
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(TrigSourceMessage other) {
    if (other == null) {
      return;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.TrigCoupling != 0) {
      TrigCoupling = other.TrigCoupling;
    }
    if (other.TrigLevel1 != 0D) {
      TrigLevel1 = other.TrigLevel1;
    }
    if (other.TrigLevel2 != 0D) {
      TrigLevel2 = other.TrigLevel2;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Channel = input.ReadInt32();
          break;
        }
        case 16: {
          trigCoupling_ = (global::TrigSourceMessage.Types.TrigCoupling) input.ReadEnum();
          break;
        }
        case 25: {
          TrigLevel1 = input.ReadDouble();
          break;
        }
        case 33: {
          TrigLevel2 = input.ReadDouble();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the TrigSourceMessage message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum TrigCoupling {
      [pbr::OriginalName("Dc")] Dc = 0,
      [pbr::OriginalName("Ac")] Ac = 1,
      [pbr::OriginalName("HfReject")] HfReject = 2,
      [pbr::OriginalName("Dc50Ohms")] Dc50Ohms = 3,
      [pbr::OriginalName("Ac50Ohms")] Ac50Ohms = 4,
    }

    public enum TrigSlope {
      [pbr::OriginalName("Positive")] Positive = 0,
      [pbr::OriginalName("Negative")] Negative = 1,
    }

  }
  #endregion

}

/// <summary>
///
///UIMF Frame request. Specifies both global 
///and frame specific data.
///TODO: Investigate splitting UIMF request into two parts, 
///Global Data Request (e.g. number of frames, global parameters such as nbr samples, frame length, offset bins)
///Frame Data Request (e.g. current frame number request, potential frame specific parameters).
/// </summary>
public sealed partial class UimfRequestMessage : pb::IMessage<UimfRequestMessage> {
  private static readonly pb::MessageParser<UimfRequestMessage> _parser = new pb::MessageParser<UimfRequestMessage>(() => new UimfRequestMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UimfRequestMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UimfRequestMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UimfRequestMessage(UimfRequestMessage other) : this() {
    startTrigger_ = other.startTrigger_;
    nbrSamples_ = other.nbrSamples_;
    frameLength_ = other.frameLength_;
    nbrAccumulations_ = other.nbrAccumulations_;
    frameNumber_ = other.frameNumber_;
    offsetBins_ = other.offsetBins_;
    fileName_ = other.fileName_;
    frameType_ = other.frameType_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UimfRequestMessage Clone() {
    return new UimfRequestMessage(this);
  }

  /// <summary>Field number for the "start_trigger" field.</summary>
  public const int StartTriggerFieldNumber = 1;
  private ulong startTrigger_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong StartTrigger {
    get { return startTrigger_; }
    set {
      startTrigger_ = value;
    }
  }

  /// <summary>Field number for the "nbr_samples" field.</summary>
  public const int NbrSamplesFieldNumber = 2;
  private ulong nbrSamples_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong NbrSamples {
    get { return nbrSamples_; }
    set {
      nbrSamples_ = value;
    }
  }

  /// <summary>Field number for the "frame_length" field.</summary>
  public const int FrameLengthFieldNumber = 3;
  private ulong frameLength_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong FrameLength {
    get { return frameLength_; }
    set {
      frameLength_ = value;
    }
  }

  /// <summary>Field number for the "nbr_accumulations" field.</summary>
  public const int NbrAccumulationsFieldNumber = 4;
  private ulong nbrAccumulations_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong NbrAccumulations {
    get { return nbrAccumulations_; }
    set {
      nbrAccumulations_ = value;
    }
  }

  /// <summary>Field number for the "frame_number" field.</summary>
  public const int FrameNumberFieldNumber = 5;
  private uint frameNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FrameNumber {
    get { return frameNumber_; }
    set {
      frameNumber_ = value;
    }
  }

  /// <summary>Field number for the "offset_bins" field.</summary>
  public const int OffsetBinsFieldNumber = 6;
  private uint offsetBins_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint OffsetBins {
    get { return offsetBins_; }
    set {
      offsetBins_ = value;
    }
  }

  /// <summary>Field number for the "file_name" field.</summary>
  public const int FileNameFieldNumber = 7;
  private string fileName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FileName {
    get { return fileName_; }
    set {
      fileName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "frame_type" field.</summary>
  public const int FrameTypeFieldNumber = 8;
  private global::UimfRequestMessage.Types.FrameType frameType_ = 0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UimfRequestMessage.Types.FrameType FrameType {
    get { return frameType_; }
    set {
      frameType_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UimfRequestMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UimfRequestMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (StartTrigger != other.StartTrigger) return false;
    if (NbrSamples != other.NbrSamples) return false;
    if (FrameLength != other.FrameLength) return false;
    if (NbrAccumulations != other.NbrAccumulations) return false;
    if (FrameNumber != other.FrameNumber) return false;
    if (OffsetBins != other.OffsetBins) return false;
    if (FileName != other.FileName) return false;
    if (FrameType != other.FrameType) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (StartTrigger != 0UL) hash ^= StartTrigger.GetHashCode();
    if (NbrSamples != 0UL) hash ^= NbrSamples.GetHashCode();
    if (FrameLength != 0UL) hash ^= FrameLength.GetHashCode();
    if (NbrAccumulations != 0UL) hash ^= NbrAccumulations.GetHashCode();
    if (FrameNumber != 0) hash ^= FrameNumber.GetHashCode();
    if (OffsetBins != 0) hash ^= OffsetBins.GetHashCode();
    if (FileName.Length != 0) hash ^= FileName.GetHashCode();
    if (FrameType != 0) hash ^= FrameType.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (StartTrigger != 0UL) {
      output.WriteRawTag(8);
      output.WriteUInt64(StartTrigger);
    }
    if (NbrSamples != 0UL) {
      output.WriteRawTag(16);
      output.WriteUInt64(NbrSamples);
    }
    if (FrameLength != 0UL) {
      output.WriteRawTag(24);
      output.WriteUInt64(FrameLength);
    }
    if (NbrAccumulations != 0UL) {
      output.WriteRawTag(32);
      output.WriteUInt64(NbrAccumulations);
    }
    if (FrameNumber != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(FrameNumber);
    }
    if (OffsetBins != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(OffsetBins);
    }
    if (FileName.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(FileName);
    }
    if (FrameType != 0) {
      output.WriteRawTag(64);
      output.WriteEnum((int) FrameType);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (StartTrigger != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTrigger);
    }
    if (NbrSamples != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NbrSamples);
    }
    if (FrameLength != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(FrameLength);
    }
    if (NbrAccumulations != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(NbrAccumulations);
    }
    if (FrameNumber != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FrameNumber);
    }
    if (OffsetBins != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetBins);
    }
    if (FileName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FileName);
    }
    if (FrameType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FrameType);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UimfRequestMessage other) {
    if (other == null) {
      return;
    }
    if (other.StartTrigger != 0UL) {
      StartTrigger = other.StartTrigger;
    }
    if (other.NbrSamples != 0UL) {
      NbrSamples = other.NbrSamples;
    }
    if (other.FrameLength != 0UL) {
      FrameLength = other.FrameLength;
    }
    if (other.NbrAccumulations != 0UL) {
      NbrAccumulations = other.NbrAccumulations;
    }
    if (other.FrameNumber != 0) {
      FrameNumber = other.FrameNumber;
    }
    if (other.OffsetBins != 0) {
      OffsetBins = other.OffsetBins;
    }
    if (other.FileName.Length != 0) {
      FileName = other.FileName;
    }
    if (other.FrameType != 0) {
      FrameType = other.FrameType;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          StartTrigger = input.ReadUInt64();
          break;
        }
        case 16: {
          NbrSamples = input.ReadUInt64();
          break;
        }
        case 24: {
          FrameLength = input.ReadUInt64();
          break;
        }
        case 32: {
          NbrAccumulations = input.ReadUInt64();
          break;
        }
        case 40: {
          FrameNumber = input.ReadUInt32();
          break;
        }
        case 48: {
          OffsetBins = input.ReadUInt32();
          break;
        }
        case 58: {
          FileName = input.ReadString();
          break;
        }
        case 64: {
          frameType_ = (global::UimfRequestMessage.Types.FrameType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the UimfRequestMessage message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public enum FrameType {
      [pbr::OriginalName("MS")] Ms = 0,
      [pbr::OriginalName("MSMS")] Msms = 1,
      [pbr::OriginalName("Calibration")] Calibration = 2,
      [pbr::OriginalName("Prescan")] Prescan = 3,
    }

  }
  #endregion

}

public sealed partial class DigitizerSetupMessage : pb::IMessage<DigitizerSetupMessage> {
  private static readonly pb::MessageParser<DigitizerSetupMessage> _parser = new pb::MessageParser<DigitizerSetupMessage>(() => new DigitizerSetupMessage());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DigitizerSetupMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::MessageReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DigitizerSetupMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DigitizerSetupMessage(DigitizerSetupMessage other) : this() {
    horizontal_ = other.horizontal_;
    vertical_ = other.vertical_;
    trigClass_ = other.trigClass_;
    trigSource_ = other.trigSource_;
    mode_ = other.mode_;
    samples_ = other.samples_;
    segments_ = other.segments_;
    postSamples_ = other.postSamples_;
    preSamples_ = other.preSamples_;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DigitizerSetupMessage Clone() {
    return new DigitizerSetupMessage(this);
  }

  /// <summary>Field number for the "horizontal" field.</summary>
  public const int HorizontalFieldNumber = 1;
  private double horizontal_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Horizontal {
    get { return horizontal_; }
    set {
      horizontal_ = value;
    }
  }

  /// <summary>Field number for the "vertical" field.</summary>
  public const int VerticalFieldNumber = 2;
  private double vertical_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double Vertical {
    get { return vertical_; }
    set {
      vertical_ = value;
    }
  }

  /// <summary>Field number for the "trig_class" field.</summary>
  public const int TrigClassFieldNumber = 3;
  private double trigClass_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TrigClass {
    get { return trigClass_; }
    set {
      trigClass_ = value;
    }
  }

  /// <summary>Field number for the "trig_source" field.</summary>
  public const int TrigSourceFieldNumber = 4;
  private double trigSource_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public double TrigSource {
    get { return trigSource_; }
    set {
      trigSource_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 5;
  private int mode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "samples" field.</summary>
  public const int SamplesFieldNumber = 6;
  private uint samples_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Samples {
    get { return samples_; }
    set {
      samples_ = value;
    }
  }

  /// <summary>Field number for the "segments" field.</summary>
  public const int SegmentsFieldNumber = 7;
  private uint segments_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Segments {
    get { return segments_; }
    set {
      segments_ = value;
    }
  }

  /// <summary>Field number for the "post_samples" field.</summary>
  public const int PostSamplesFieldNumber = 8;
  private uint postSamples_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PostSamples {
    get { return postSamples_; }
    set {
      postSamples_ = value;
    }
  }

  /// <summary>Field number for the "pre_samples" field.</summary>
  public const int PreSamplesFieldNumber = 9;
  private uint preSamples_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PreSamples {
    get { return preSamples_; }
    set {
      preSamples_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DigitizerSetupMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DigitizerSetupMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Horizontal != other.Horizontal) return false;
    if (Vertical != other.Vertical) return false;
    if (TrigClass != other.TrigClass) return false;
    if (TrigSource != other.TrigSource) return false;
    if (Mode != other.Mode) return false;
    if (Samples != other.Samples) return false;
    if (Segments != other.Segments) return false;
    if (PostSamples != other.PostSamples) return false;
    if (PreSamples != other.PreSamples) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Horizontal != 0D) hash ^= Horizontal.GetHashCode();
    if (Vertical != 0D) hash ^= Vertical.GetHashCode();
    if (TrigClass != 0D) hash ^= TrigClass.GetHashCode();
    if (TrigSource != 0D) hash ^= TrigSource.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (Samples != 0) hash ^= Samples.GetHashCode();
    if (Segments != 0) hash ^= Segments.GetHashCode();
    if (PostSamples != 0) hash ^= PostSamples.GetHashCode();
    if (PreSamples != 0) hash ^= PreSamples.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Horizontal != 0D) {
      output.WriteRawTag(9);
      output.WriteDouble(Horizontal);
    }
    if (Vertical != 0D) {
      output.WriteRawTag(17);
      output.WriteDouble(Vertical);
    }
    if (TrigClass != 0D) {
      output.WriteRawTag(25);
      output.WriteDouble(TrigClass);
    }
    if (TrigSource != 0D) {
      output.WriteRawTag(33);
      output.WriteDouble(TrigSource);
    }
    if (Mode != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Mode);
    }
    if (Samples != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Samples);
    }
    if (Segments != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Segments);
    }
    if (PostSamples != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(PostSamples);
    }
    if (PreSamples != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(PreSamples);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Horizontal != 0D) {
      size += 1 + 8;
    }
    if (Vertical != 0D) {
      size += 1 + 8;
    }
    if (TrigClass != 0D) {
      size += 1 + 8;
    }
    if (TrigSource != 0D) {
      size += 1 + 8;
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mode);
    }
    if (Samples != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Samples);
    }
    if (Segments != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Segments);
    }
    if (PostSamples != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PostSamples);
    }
    if (PreSamples != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PreSamples);
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DigitizerSetupMessage other) {
    if (other == null) {
      return;
    }
    if (other.Horizontal != 0D) {
      Horizontal = other.Horizontal;
    }
    if (other.Vertical != 0D) {
      Vertical = other.Vertical;
    }
    if (other.TrigClass != 0D) {
      TrigClass = other.TrigClass;
    }
    if (other.TrigSource != 0D) {
      TrigSource = other.TrigSource;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.Samples != 0) {
      Samples = other.Samples;
    }
    if (other.Segments != 0) {
      Segments = other.Segments;
    }
    if (other.PostSamples != 0) {
      PostSamples = other.PostSamples;
    }
    if (other.PreSamples != 0) {
      PreSamples = other.PreSamples;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 9: {
          Horizontal = input.ReadDouble();
          break;
        }
        case 17: {
          Vertical = input.ReadDouble();
          break;
        }
        case 25: {
          TrigClass = input.ReadDouble();
          break;
        }
        case 33: {
          TrigSource = input.ReadDouble();
          break;
        }
        case 40: {
          Mode = input.ReadInt32();
          break;
        }
        case 48: {
          Samples = input.ReadUInt32();
          break;
        }
        case 56: {
          Segments = input.ReadUInt32();
          break;
        }
        case 64: {
          PostSamples = input.ReadUInt32();
          break;
        }
        case 72: {
          PreSamples = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
